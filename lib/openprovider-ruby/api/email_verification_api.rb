=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class EmailVerificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List domain email verifications
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :domain_id The domain id.
    # @option opts [String] :domain The domain.
    # @option opts [String] :email The email.
    # @option opts [String] :handle The handle.
    # @option opts [String] :status The status.
    # @option opts [String] :description The description.
    # @option opts [BOOLEAN] :is_suspended Is suspended.
    # @option opts [String] :response_type The type.
    # @option opts [String] :response_to The to.
    # @option opts [Integer] :limit The limit.
    # @option opts [Integer] :offset The offset.
    # @return [EmailListDomainVerificationsResponse]
    def list_domain_email_verifications(opts = {})
      data, _status_code, _headers = list_domain_email_verifications_with_http_info(opts)
      data
    end

    # List domain email verifications
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :domain_id The domain id.
    # @option opts [String] :domain The domain.
    # @option opts [String] :email The email.
    # @option opts [String] :handle The handle.
    # @option opts [String] :status The status.
    # @option opts [String] :description The description.
    # @option opts [BOOLEAN] :is_suspended Is suspended.
    # @option opts [String] :response_type The type.
    # @option opts [String] :response_to The to.
    # @option opts [Integer] :limit The limit.
    # @option opts [Integer] :offset The offset.
    # @return [Array<(EmailListDomainVerificationsResponse, Integer, Hash)>] EmailListDomainVerificationsResponse data, response status code and response headers
    def list_domain_email_verifications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailVerificationApi.list_domain_email_verifications ...'
      end
      # resource path
      local_var_path = '/v1beta/customers/verifications/emails/domains'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain_id'] = opts[:'domain_id'] if !opts[:'domain_id'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'handle'] = opts[:'handle'] if !opts[:'handle'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'is_suspended'] = opts[:'is_suspended'] if !opts[:'is_suspended'].nil?
      query_params[:'response.type'] = opts[:'response_type'] if !opts[:'response_type'].nil?
      query_params[:'response.to'] = opts[:'response_to'] if !opts[:'response_to'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmailListDomainVerificationsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailVerificationApi#list_domain_email_verifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart email verification
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [EmailRestartEmailVerificationResponse]
    def restart_email_verification(body, opts = {})
      data, _status_code, _headers = restart_email_verification_with_http_info(body, opts)
      data
    end

    # Restart email verification
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailRestartEmailVerificationResponse, Integer, Hash)>] EmailRestartEmailVerificationResponse data, response status code and response headers
    def restart_email_verification_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailVerificationApi.restart_email_verification ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailVerificationApi.restart_email_verification"
      end
      # resource path
      local_var_path = '/v1beta/customers/verifications/emails/restart'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'EmailRestartEmailVerificationResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailVerificationApi#restart_email_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start email verification
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [EmailStartEmailVerificationResponse]
    def start_email_verification(body, opts = {})
      data, _status_code, _headers = start_email_verification_with_http_info(body, opts)
      data
    end

    # Start email verification
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailStartEmailVerificationResponse, Integer, Hash)>] EmailStartEmailVerificationResponse data, response status code and response headers
    def start_email_verification_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailVerificationApi.start_email_verification ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailVerificationApi.start_email_verification"
      end
      # resource path
      local_var_path = '/v1beta/customers/verifications/emails/start'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'EmailStartEmailVerificationResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailVerificationApi#start_email_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
