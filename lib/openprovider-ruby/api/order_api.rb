=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [OrderCancelOrderResponse]
    def cancel_order(body, id, opts = {})
      data, _status_code, _headers = cancel_order_with_http_info(body, id, opts)
      data
    end

    # Cancel order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderCancelOrderResponse, Integer, Hash)>] OrderCancelOrderResponse data, response status code and response headers
    def cancel_order_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancel_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.cancel_order"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.cancel_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'OrderCancelOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancel_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create order
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [OrderCreateOrderResponse]
    def create_order(body, opts = {})
      data, _status_code, _headers = create_order_with_http_info(body, opts)
      data
    end

    # Create order
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderCreateOrderResponse, Integer, Hash)>] OrderCreateOrderResponse data, response status code and response headers
    def create_order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.create_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'OrderCreateOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get order
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [OrderGetOrderResponse]
    def get_order(id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(id, opts)
      data
    end

    # Get order
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderGetOrderResponse, Integer, Hash)>] OrderGetOrderResponse data, response status code and response headers
    def get_order_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.get_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'OrderGetOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Search query limit. (default to 100)
    # @option opts [Integer] :offset Search query offset.
    # @option opts [String] :order_by_common_name desc/asc.
    # @option opts [String] :order_by_order_date desc/asc. (default to desc)
    # @option opts [String] :order_by_active_date desc/asc.
    # @option opts [String] :order_by_expiration_date desc/asc.
    # @option opts [String] :order_by_status desc/asc.
    # @option opts [String] :order_by_product_name desc/asc.
    # @option opts [String] :common_name_pattern Certificate common name pattern. Wildcard (*) can be used.
    # @option opts [Array<String>] :status Array of order statuses.
    # @option opts [String] :contact_handle Contact handle.
    # @option opts [BOOLEAN] :show_expiring Indicates, whether to return only certificates that are expiring within 30 days.
    # @return [OrderListOrdersResponse]
    def list_orders(opts = {})
      data, _status_code, _headers = list_orders_with_http_info(opts)
      data
    end

    # List orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Search query limit.
    # @option opts [Integer] :offset Search query offset.
    # @option opts [String] :order_by_common_name desc/asc.
    # @option opts [String] :order_by_order_date desc/asc.
    # @option opts [String] :order_by_active_date desc/asc.
    # @option opts [String] :order_by_expiration_date desc/asc.
    # @option opts [String] :order_by_status desc/asc.
    # @option opts [String] :order_by_product_name desc/asc.
    # @option opts [String] :common_name_pattern Certificate common name pattern. Wildcard (*) can be used.
    # @option opts [Array<String>] :status Array of order statuses.
    # @option opts [String] :contact_handle Contact handle.
    # @option opts [BOOLEAN] :show_expiring Indicates, whether to return only certificates that are expiring within 30 days.
    # @return [Array<(OrderListOrdersResponse, Integer, Hash)>] OrderListOrdersResponse data, response status code and response headers
    def list_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.list_orders ...'
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by.common_name'] = opts[:'order_by_common_name'] if !opts[:'order_by_common_name'].nil?
      query_params[:'order_by.order_date'] = opts[:'order_by_order_date'] if !opts[:'order_by_order_date'].nil?
      query_params[:'order_by.active_date'] = opts[:'order_by_active_date'] if !opts[:'order_by_active_date'].nil?
      query_params[:'order_by.expiration_date'] = opts[:'order_by_expiration_date'] if !opts[:'order_by_expiration_date'].nil?
      query_params[:'order_by.status'] = opts[:'order_by_status'] if !opts[:'order_by_status'].nil?
      query_params[:'order_by.product_name'] = opts[:'order_by_product_name'] if !opts[:'order_by_product_name'].nil?
      query_params[:'common_name_pattern'] = opts[:'common_name_pattern'] if !opts[:'common_name_pattern'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?
      query_params[:'contact_handle'] = opts[:'contact_handle'] if !opts[:'contact_handle'].nil?
      query_params[:'show_expiring'] = opts[:'show_expiring'] if !opts[:'show_expiring'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'OrderListOrdersResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#list_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reissue order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [OrderReissueOrderResponse]
    def reissue_order(body, id, opts = {})
      data, _status_code, _headers = reissue_order_with_http_info(body, id, opts)
      data
    end

    # Reissue order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderReissueOrderResponse, Integer, Hash)>] OrderReissueOrderResponse data, response status code and response headers
    def reissue_order_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.reissue_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.reissue_order"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.reissue_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders/{id}/reissue'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'OrderReissueOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#reissue_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Renew order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [OrderRenewOrderResponse]
    def renew_order(body, id, opts = {})
      data, _status_code, _headers = renew_order_with_http_info(body, id, opts)
      data
    end

    # Renew order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderRenewOrderResponse, Integer, Hash)>] OrderRenewOrderResponse data, response status code and response headers
    def renew_order_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.renew_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.renew_order"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.renew_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders/{id}/renew'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'OrderRenewOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#renew_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [OrderUpdateOrderResponse]
    def update_order(body, id, opts = {})
      data, _status_code, _headers = update_order_with_http_info(body, id, opts)
      data
    end

    # Update order
    # @param body 
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderUpdateOrderResponse, Integer, Hash)>] OrderUpdateOrderResponse data, response status code and response headers
    def update_order_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.update_order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.update_order"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.update_order"
      end
      # resource path
      local_var_path = '/v1beta/ssl/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'OrderUpdateOrderResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#update_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
