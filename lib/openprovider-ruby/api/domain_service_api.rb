=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class DomainServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve transfer
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [ResponseBoolResponse]
    def approve_transfer(body, id, opts = {})
      data, _status_code, _headers = approve_transfer_with_http_info(body, id, opts)
      data
    end

    # Approve transfer
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def approve_transfer_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.approve_transfer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.approve_transfer"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.approve_transfer"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}/transfer/approve'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#approve_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DomainCheckDomainResponse]
    def check_domain(body, opts = {})
      data, _status_code, _headers = check_domain_with_http_info(body, opts)
      data
    end

    # Check domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCheckDomainResponse, Integer, Hash)>] DomainCheckDomainResponse data, response status code and response headers
    def check_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.check_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.check_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainCheckDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#check_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DomainCreateDomainResponse]
    def create_domain(body, opts = {})
      data, _status_code, _headers = create_domain_with_http_info(body, opts)
      data
    end

    # Create domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainCreateDomainResponse, Integer, Hash)>] DomainCreateDomainResponse data, response status code and response headers
    def create_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.create_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.create_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainCreateDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#create_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete domain
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [String] :type Type of deletion request.
    # @option opts [BOOLEAN] :skip_soft_quarantine Deletes domain, skipping the soft quarantine.
    # @option opts [BOOLEAN] :force_delete Force delete domain even if it has glue records.
    # @return [DomainDeleteDomainResponse]
    def delete_domain(id, opts = {})
      data, _status_code, _headers = delete_domain_with_http_info(id, opts)
      data
    end

    # Delete domain
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [String] :type Type of deletion request.
    # @option opts [BOOLEAN] :skip_soft_quarantine Deletes domain, skipping the soft quarantine.
    # @option opts [BOOLEAN] :force_delete Force delete domain even if it has glue records.
    # @return [Array<(DomainDeleteDomainResponse, Integer, Hash)>] DomainDeleteDomainResponse data, response status code and response headers
    def delete_domain_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.delete_domain ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.delete_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain.name'] = opts[:'domain_name'] if !opts[:'domain_name'].nil?
      query_params[:'domain.extension'] = opts[:'domain_extension'] if !opts[:'domain_extension'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'skip_soft_quarantine'] = opts[:'skip_soft_quarantine'] if !opts[:'skip_soft_quarantine'].nil?
      query_params[:'force_delete'] = opts[:'force_delete'] if !opts[:'force_delete'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DomainDeleteDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get domain
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [BOOLEAN] :with_history Returns domain mutations history.
    # @option opts [BOOLEAN] :with_api_history Returns domain API calls history.
    # @option opts [BOOLEAN] :with_additional_data Returns domain additional data.
    # @option opts [BOOLEAN] :with_verification_email Returns information about domain owner email verification status.
    # @option opts [BOOLEAN] :with_abuse_details Returns domain abuse details.
    # @option opts [BOOLEAN] :with_whois_privacy_data Returns WPP data.
    # @option opts [BOOLEAN] :with_registry_statuses Indicates, if registry EPP statuses should be retrieved.
    # @option opts [BOOLEAN] :is_deleted Indicates whether object is deleted.
    # @return [DomainGetDomainResponse]
    def get_domain(id, opts = {})
      data, _status_code, _headers = get_domain_with_http_info(id, opts)
      data
    end

    # Get domain
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [BOOLEAN] :with_history Returns domain mutations history.
    # @option opts [BOOLEAN] :with_api_history Returns domain API calls history.
    # @option opts [BOOLEAN] :with_additional_data Returns domain additional data.
    # @option opts [BOOLEAN] :with_verification_email Returns information about domain owner email verification status.
    # @option opts [BOOLEAN] :with_abuse_details Returns domain abuse details.
    # @option opts [BOOLEAN] :with_whois_privacy_data Returns WPP data.
    # @option opts [BOOLEAN] :with_registry_statuses Indicates, if registry EPP statuses should be retrieved.
    # @option opts [BOOLEAN] :is_deleted Indicates whether object is deleted.
    # @return [Array<(DomainGetDomainResponse, Integer, Hash)>] DomainGetDomainResponse data, response status code and response headers
    def get_domain_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.get_domain ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.get_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain.name'] = opts[:'domain_name'] if !opts[:'domain_name'].nil?
      query_params[:'domain.extension'] = opts[:'domain_extension'] if !opts[:'domain_extension'].nil?
      query_params[:'with_history'] = opts[:'with_history'] if !opts[:'with_history'].nil?
      query_params[:'with_api_history'] = opts[:'with_api_history'] if !opts[:'with_api_history'].nil?
      query_params[:'with_additional_data'] = opts[:'with_additional_data'] if !opts[:'with_additional_data'].nil?
      query_params[:'with_verification_email'] = opts[:'with_verification_email'] if !opts[:'with_verification_email'].nil?
      query_params[:'with_abuse_details'] = opts[:'with_abuse_details'] if !opts[:'with_abuse_details'].nil?
      query_params[:'with_whois_privacy_data'] = opts[:'with_whois_privacy_data'] if !opts[:'with_whois_privacy_data'].nil?
      query_params[:'with_registry_statuses'] = opts[:'with_registry_statuses'] if !opts[:'with_registry_statuses'].nil?
      query_params[:'is_deleted'] = opts[:'is_deleted'] if !opts[:'is_deleted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DomainGetDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#get_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by_id Domain id number.
    # @option opts [String] :order_by_domain_name The domain name.
    # @option opts [String] :order_by_domain_extension Domain extension.
    # @option opts [String] :order_by_order_date The order date.
    # @option opts [String] :order_by_active_date The active date.
    # @option opts [String] :order_by_expiration_date Domain expiration date.
    # @option opts [String] :order_by_renewal_date Date on which domain will be renewed.
    # @option opts [String] :order_by_status Domain status.
    # @option opts [String] :order_by_transfer_date The transfer date.
    # @option opts [Integer] :limit The limit.
    # @option opts [Integer] :offset The offset.
    # @option opts [Integer] :id Domain id number.
    # @option opts [String] :extension Domain extension.
    # @option opts [String] :renewal_date Date on which domain will be renewed.
    # @option opts [String] :full_name Full name of the domain.
    # @option opts [String] :domain_name_pattern The domain name pattern.
    # @option opts [String] :ns_group_pattern Nameserver group name pattern.
    # @option opts [String] :status Domain status.
    # @option opts [Array<String>] :status_not_equal Array of domain statuses to exclude.
    # @option opts [String] :queue_status The queue status.
    # @option opts [String] :contact_handle Handle to filter by.
    # @option opts [String] :comment_pattern The comment pattern.
    # @option opts [BOOLEAN] :with_history With history.
    # @option opts [BOOLEAN] :with_api_history With api history.
    # @option opts [BOOLEAN] :with_additional_data With additional data.
    # @option opts [String] :application_mode When new gTLD is started it gets through several phases before it becomes available for registration to everybody (General availability or GA). There are several phases before GA when it is still possible to apply for a domain, but with some restrictions.
    # @option opts [BOOLEAN] :with_verification_email Returns information about domain owner email verification status.
    # @option opts [BOOLEAN] :with_registry_statuses Indicates, if registry EPP statuses should be retrieved.
    # @option opts [String] :response_type The type.
    # @option opts [String] :response_to The to.
    # @option opts [BOOLEAN] :is_deleted Indicates whether object is deleted.
    # @return [DomainListDomainsResponse]
    def list_domains(opts = {})
      data, _status_code, _headers = list_domains_with_http_info(opts)
      data
    end

    # List domains
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by_id Domain id number.
    # @option opts [String] :order_by_domain_name The domain name.
    # @option opts [String] :order_by_domain_extension Domain extension.
    # @option opts [String] :order_by_order_date The order date.
    # @option opts [String] :order_by_active_date The active date.
    # @option opts [String] :order_by_expiration_date Domain expiration date.
    # @option opts [String] :order_by_renewal_date Date on which domain will be renewed.
    # @option opts [String] :order_by_status Domain status.
    # @option opts [String] :order_by_transfer_date The transfer date.
    # @option opts [Integer] :limit The limit.
    # @option opts [Integer] :offset The offset.
    # @option opts [Integer] :id Domain id number.
    # @option opts [String] :extension Domain extension.
    # @option opts [String] :renewal_date Date on which domain will be renewed.
    # @option opts [String] :full_name Full name of the domain.
    # @option opts [String] :domain_name_pattern The domain name pattern.
    # @option opts [String] :ns_group_pattern Nameserver group name pattern.
    # @option opts [String] :status Domain status.
    # @option opts [Array<String>] :status_not_equal Array of domain statuses to exclude.
    # @option opts [String] :queue_status The queue status.
    # @option opts [String] :contact_handle Handle to filter by.
    # @option opts [String] :comment_pattern The comment pattern.
    # @option opts [BOOLEAN] :with_history With history.
    # @option opts [BOOLEAN] :with_api_history With api history.
    # @option opts [BOOLEAN] :with_additional_data With additional data.
    # @option opts [String] :application_mode When new gTLD is started it gets through several phases before it becomes available for registration to everybody (General availability or GA). There are several phases before GA when it is still possible to apply for a domain, but with some restrictions.
    # @option opts [BOOLEAN] :with_verification_email Returns information about domain owner email verification status.
    # @option opts [BOOLEAN] :with_registry_statuses Indicates, if registry EPP statuses should be retrieved.
    # @option opts [String] :response_type The type.
    # @option opts [String] :response_to The to.
    # @option opts [BOOLEAN] :is_deleted Indicates whether object is deleted.
    # @return [Array<(DomainListDomainsResponse, Integer, Hash)>] DomainListDomainsResponse data, response status code and response headers
    def list_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.list_domains ...'
      end
      # resource path
      local_var_path = '/v1beta/domains'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by.id'] = opts[:'order_by_id'] if !opts[:'order_by_id'].nil?
      query_params[:'order_by.domain_name'] = opts[:'order_by_domain_name'] if !opts[:'order_by_domain_name'].nil?
      query_params[:'order_by.domain_extension'] = opts[:'order_by_domain_extension'] if !opts[:'order_by_domain_extension'].nil?
      query_params[:'order_by.order_date'] = opts[:'order_by_order_date'] if !opts[:'order_by_order_date'].nil?
      query_params[:'order_by.active_date'] = opts[:'order_by_active_date'] if !opts[:'order_by_active_date'].nil?
      query_params[:'order_by.expiration_date'] = opts[:'order_by_expiration_date'] if !opts[:'order_by_expiration_date'].nil?
      query_params[:'order_by.renewal_date'] = opts[:'order_by_renewal_date'] if !opts[:'order_by_renewal_date'].nil?
      query_params[:'order_by.status'] = opts[:'order_by_status'] if !opts[:'order_by_status'].nil?
      query_params[:'order_by.transfer_date'] = opts[:'order_by_transfer_date'] if !opts[:'order_by_transfer_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'extension'] = opts[:'extension'] if !opts[:'extension'].nil?
      query_params[:'renewal_date'] = opts[:'renewal_date'] if !opts[:'renewal_date'].nil?
      query_params[:'full_name'] = opts[:'full_name'] if !opts[:'full_name'].nil?
      query_params[:'domain_name_pattern'] = opts[:'domain_name_pattern'] if !opts[:'domain_name_pattern'].nil?
      query_params[:'ns_group_pattern'] = opts[:'ns_group_pattern'] if !opts[:'ns_group_pattern'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'status_not_equal'] = @api_client.build_collection_param(opts[:'status_not_equal'], :multi) if !opts[:'status_not_equal'].nil?
      query_params[:'queue_status'] = opts[:'queue_status'] if !opts[:'queue_status'].nil?
      query_params[:'contact_handle'] = opts[:'contact_handle'] if !opts[:'contact_handle'].nil?
      query_params[:'comment_pattern'] = opts[:'comment_pattern'] if !opts[:'comment_pattern'].nil?
      query_params[:'with_history'] = opts[:'with_history'] if !opts[:'with_history'].nil?
      query_params[:'with_api_history'] = opts[:'with_api_history'] if !opts[:'with_api_history'].nil?
      query_params[:'with_additional_data'] = opts[:'with_additional_data'] if !opts[:'with_additional_data'].nil?
      query_params[:'application_mode'] = opts[:'application_mode'] if !opts[:'application_mode'].nil?
      query_params[:'with_verification_email'] = opts[:'with_verification_email'] if !opts[:'with_verification_email'].nil?
      query_params[:'with_registry_statuses'] = opts[:'with_registry_statuses'] if !opts[:'with_registry_statuses'].nil?
      query_params[:'response.type'] = opts[:'response_type'] if !opts[:'response_type'].nil?
      query_params[:'response.to'] = opts[:'response_to'] if !opts[:'response_to'].nil?
      query_params[:'is_deleted'] = opts[:'is_deleted'] if !opts[:'is_deleted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DomainListDomainsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#list_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Renew domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [DomainRenewDomainResponse]
    def renew_domain(body, id, opts = {})
      data, _status_code, _headers = renew_domain_with_http_info(body, id, opts)
      data
    end

    # Renew domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRenewDomainResponse, Integer, Hash)>] DomainRenewDomainResponse data, response status code and response headers
    def renew_domain_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.renew_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.renew_domain"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.renew_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}/renew'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainRenewDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#renew_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restore domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [DomainRestoreDomainResponse]
    def restore_domain(body, id, opts = {})
      data, _status_code, _headers = restore_domain_with_http_info(body, id, opts)
      data
    end

    # Restore domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainRestoreDomainResponse, Integer, Hash)>] DomainRestoreDomainResponse data, response status code and response headers
    def restore_domain_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.restore_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.restore_domain"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.restore_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}/restore'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainRestoreDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#restore_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send foa1
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [ResponseBoolResponse]
    def send_foa1(body, id, opts = {})
      data, _status_code, _headers = send_foa1_with_http_info(body, id, opts)
      data
    end

    # Send foa1
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def send_foa1_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.send_foa1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.send_foa1"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.send_foa1"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}/transfer/send-foa1'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#send_foa1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Suggest name domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DomainSuggestNameDomainResponse]
    def suggest_name_domain(body, opts = {})
      data, _status_code, _headers = suggest_name_domain_with_http_info(body, opts)
      data
    end

    # Suggest name domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainSuggestNameDomainResponse, Integer, Hash)>] DomainSuggestNameDomainResponse data, response status code and response headers
    def suggest_name_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.suggest_name_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.suggest_name_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/suggest-name'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainSuggestNameDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#suggest_name_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Trade domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DomainTradeDomainResponse]
    def trade_domain(body, opts = {})
      data, _status_code, _headers = trade_domain_with_http_info(body, opts)
      data
    end

    # Trade domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainTradeDomainResponse, Integer, Hash)>] DomainTradeDomainResponse data, response status code and response headers
    def trade_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.trade_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.trade_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/trade'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainTradeDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#trade_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [DomainTransferDomainResponse]
    def transfer_domain(body, opts = {})
      data, _status_code, _headers = transfer_domain_with_http_info(body, opts)
      data
    end

    # Transfer domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainTransferDomainResponse, Integer, Hash)>] DomainTransferDomainResponse data, response status code and response headers
    def transfer_domain_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.transfer_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.transfer_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/transfer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainTransferDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#transfer_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Try again last operation
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [ResponseBoolResponse]
    def try_again_last_operation(body, id, opts = {})
      data, _status_code, _headers = try_again_last_operation_with_http_info(body, id, opts)
      data
    end

    # Try again last operation
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def try_again_last_operation_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.try_again_last_operation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.try_again_last_operation"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.try_again_last_operation"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}/last-operation/restart'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#try_again_last_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [DomainUpdateDomainResponse]
    def update_domain(body, id, opts = {})
      data, _status_code, _headers = update_domain_with_http_info(body, id, opts)
      data
    end

    # Update domain
    # @param body 
    # @param id Domain id number
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainUpdateDomainResponse, Integer, Hash)>] DomainUpdateDomainResponse data, response status code and response headers
    def update_domain_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainServiceApi.update_domain ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainServiceApi.update_domain"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DomainServiceApi.update_domain"
      end
      # resource path
      local_var_path = '/v1beta/domains/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'DomainUpdateDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainServiceApi#update_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
