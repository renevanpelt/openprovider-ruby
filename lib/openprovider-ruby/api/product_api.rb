=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get product
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [ProductGetProductResponse]
    def get_product(id, opts = {})
      data, _status_code, _headers = get_product_with_http_info(id, opts)
      data
    end

    # Get product
    # @param id Object id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductGetProductResponse, Integer, Hash)>] ProductGetProductResponse data, response status code and response headers
    def get_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.get_product"
      end
      # resource path
      local_var_path = '/v1beta/ssl/products/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProductGetProductResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List products
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Search query limit.
    # @option opts [Integer] :offset Search query offset.
    # @option opts [BOOLEAN] :with_price Returns product price in the response.
    # @option opts [BOOLEAN] :with_supported_software Returns a list of supported software patforms. (default to false)
    # @option opts [BOOLEAN] :with_description Returns a description for each product, if exists.
    # @option opts [String] :order_by_name Sorting type (asc/desc).
    # @option opts [String] :order_by_brand_name Sorting type (asc/desc).
    # @option opts [String] :order_by_category Sorting type (asc/desc).
    # @option opts [String] :order_by_sub_category Sorting type (asc/desc).
    # @option opts [String] :order_by_brand_seqno Sorting type (asc/desc).
    # @option opts [String] :order_by_product_seqno Sorting type (asc/desc).
    # @return [ProductListProductsResponse]
    def list_products(opts = {})
      data, _status_code, _headers = list_products_with_http_info(opts)
      data
    end

    # List products
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Search query limit.
    # @option opts [Integer] :offset Search query offset.
    # @option opts [BOOLEAN] :with_price Returns product price in the response.
    # @option opts [BOOLEAN] :with_supported_software Returns a list of supported software patforms.
    # @option opts [BOOLEAN] :with_description Returns a description for each product, if exists.
    # @option opts [String] :order_by_name Sorting type (asc/desc).
    # @option opts [String] :order_by_brand_name Sorting type (asc/desc).
    # @option opts [String] :order_by_category Sorting type (asc/desc).
    # @option opts [String] :order_by_sub_category Sorting type (asc/desc).
    # @option opts [String] :order_by_brand_seqno Sorting type (asc/desc).
    # @option opts [String] :order_by_product_seqno Sorting type (asc/desc).
    # @return [Array<(ProductListProductsResponse, Integer, Hash)>] ProductListProductsResponse data, response status code and response headers
    def list_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.list_products ...'
      end
      # resource path
      local_var_path = '/v1beta/ssl/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'with_price'] = opts[:'with_price'] if !opts[:'with_price'].nil?
      query_params[:'with_supported_software'] = opts[:'with_supported_software'] if !opts[:'with_supported_software'].nil?
      query_params[:'with_description'] = opts[:'with_description'] if !opts[:'with_description'].nil?
      query_params[:'order_by.name'] = opts[:'order_by_name'] if !opts[:'order_by_name'].nil?
      query_params[:'order_by.brand_name'] = opts[:'order_by_brand_name'] if !opts[:'order_by_brand_name'].nil?
      query_params[:'order_by.category'] = opts[:'order_by_category'] if !opts[:'order_by_category'].nil?
      query_params[:'order_by.sub_category'] = opts[:'order_by_sub_category'] if !opts[:'order_by_sub_category'].nil?
      query_params[:'order_by.brand_seqno'] = opts[:'order_by_brand_seqno'] if !opts[:'order_by_brand_seqno'].nil?
      query_params[:'order_by.product_seqno'] = opts[:'order_by_product_seqno'] if !opts[:'order_by_product_seqno'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProductListProductsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#list_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
