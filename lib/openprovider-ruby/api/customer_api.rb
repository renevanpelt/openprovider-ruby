=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create customer
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CustomerCreateCustomerResponse]
    def create_customer(body, opts = {})
      data, _status_code, _headers = create_customer_with_http_info(body, opts)
      data
    end

    # Create customer
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerCreateCustomerResponse, Integer, Hash)>] CustomerCreateCustomerResponse data, response status code and response headers
    def create_customer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomerApi.create_customer"
      end
      # resource path
      local_var_path = '/v1beta/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CustomerCreateCustomerResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete customer
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @return [CustomerDeleteCustomerResponse]
    def delete_customer(handle, opts = {})
      data, _status_code, _headers = delete_customer_with_http_info(handle, opts)
      data
    end

    # Delete customer
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDeleteCustomerResponse, Integer, Hash)>] CustomerDeleteCustomerResponse data, response status code and response headers
    def delete_customer_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.delete_customer ...'
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.delete_customer"
      end
      # resource path
      local_var_path = '/v1beta/customers/{handle}'.sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CustomerDeleteCustomerResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get customer
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_additional_data Retrieves objects with (1) or without (0) additional data.
    # @return [CustomerGetCustomerResponse]
    def get_customer(handle, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(handle, opts)
      data
    end

    # Get customer
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_additional_data Retrieves objects with (1) or without (0) additional data.
    # @return [Array<(CustomerGetCustomerResponse, Integer, Hash)>] CustomerGetCustomerResponse data, response status code and response headers
    def get_customer_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_customer ...'
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_customer"
      end
      # resource path
      local_var_path = '/v1beta/customers/{handle}'.sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'with_additional_data'] = opts[:'with_additional_data'] if !opts[:'with_additional_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CustomerGetCustomerResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List customers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :reseller_id Your reseller id is used by default. Other values not accepted.
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order Output ordering pattern. ASC / DESC.
    # @option opts [String] :order_by Order output by field (i.e. first_name).
    # @option opts [String] :email_pattern Full or partial email address. Wildcard (*) can be used.
    # @option opts [String] :company_name_pattern Full or partial company name. Wildcard (*) can be used.
    # @option opts [String] :last_name_pattern Full or partial last name. Wildcard (*) can be used.
    # @option opts [String] :first_name_pattern Full or partial first name. Wildcard (*) can be used.
    # @option opts [String] :comment_pattern Full or partial comment value. Wildcard (*) can be used.
    # @option opts [String] :handle_pattern Full or partial handle name. Wildcard (*) can be used.
    # @option opts [String] :pattern ull or partial first name or last name or company name or handle. Wildcard (*) can be used.
    # @option opts [BOOLEAN] :with_additional_data Retrieves objects with (1) or without (0) additional data.
    # @option opts [String] :type Customer type: &#x27;company&#x27; or &#x27;individual&#x27;. If customer has not empty &#x27;companyName&#x27; than type is &#x27;company&#x27;, otherwise &#x27;individual&#x27;.
    # @option opts [Array<String>] :columns Ð¡olumns to retrieve. Possible values: &#x27;firstName&#x27;, &#x27;prefix&#x27;, &#x27;initials&#x27;, &#x27;lastName&#x27;, &#x27;companyName&#x27;, &#x27;email&#x27;, &#x27;handle&#x27;, &#x27;id&#x27;, &#x27;fullName&#x27;.
    # @return [CustomerListCustomersResponse]
    def list_customers(opts = {})
      data, _status_code, _headers = list_customers_with_http_info(opts)
      data
    end

    # List customers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :reseller_id Your reseller id is used by default. Other values not accepted.
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order Output ordering pattern. ASC / DESC.
    # @option opts [String] :order_by Order output by field (i.e. first_name).
    # @option opts [String] :email_pattern Full or partial email address. Wildcard (*) can be used.
    # @option opts [String] :company_name_pattern Full or partial company name. Wildcard (*) can be used.
    # @option opts [String] :last_name_pattern Full or partial last name. Wildcard (*) can be used.
    # @option opts [String] :first_name_pattern Full or partial first name. Wildcard (*) can be used.
    # @option opts [String] :comment_pattern Full or partial comment value. Wildcard (*) can be used.
    # @option opts [String] :handle_pattern Full or partial handle name. Wildcard (*) can be used.
    # @option opts [String] :pattern ull or partial first name or last name or company name or handle. Wildcard (*) can be used.
    # @option opts [BOOLEAN] :with_additional_data Retrieves objects with (1) or without (0) additional data.
    # @option opts [String] :type Customer type: &#x27;company&#x27; or &#x27;individual&#x27;. If customer has not empty &#x27;companyName&#x27; than type is &#x27;company&#x27;, otherwise &#x27;individual&#x27;.
    # @option opts [Array<String>] :columns Ð¡olumns to retrieve. Possible values: &#x27;firstName&#x27;, &#x27;prefix&#x27;, &#x27;initials&#x27;, &#x27;lastName&#x27;, &#x27;companyName&#x27;, &#x27;email&#x27;, &#x27;handle&#x27;, &#x27;id&#x27;, &#x27;fullName&#x27;.
    # @return [Array<(CustomerListCustomersResponse, Integer, Hash)>] CustomerListCustomersResponse data, response status code and response headers
    def list_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.list_customers ...'
      end
      # resource path
      local_var_path = '/v1beta/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reseller_id'] = opts[:'reseller_id'] if !opts[:'reseller_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'email_pattern'] = opts[:'email_pattern'] if !opts[:'email_pattern'].nil?
      query_params[:'company_name_pattern'] = opts[:'company_name_pattern'] if !opts[:'company_name_pattern'].nil?
      query_params[:'last_name_pattern'] = opts[:'last_name_pattern'] if !opts[:'last_name_pattern'].nil?
      query_params[:'first_name_pattern'] = opts[:'first_name_pattern'] if !opts[:'first_name_pattern'].nil?
      query_params[:'comment_pattern'] = opts[:'comment_pattern'] if !opts[:'comment_pattern'].nil?
      query_params[:'handle_pattern'] = opts[:'handle_pattern'] if !opts[:'handle_pattern'].nil?
      query_params[:'pattern'] = opts[:'pattern'] if !opts[:'pattern'].nil?
      query_params[:'with_additional_data'] = opts[:'with_additional_data'] if !opts[:'with_additional_data'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'columns'] = @api_client.build_collection_param(opts[:'columns'], :multi) if !opts[:'columns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CustomerListCustomersResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#list_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update customer
    # @param body 
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @return [CustomerUpdateCustomerResponse]
    def update_customer(body, handle, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(body, handle, opts)
      data
    end

    # Update customer
    # @param body 
    # @param handle Customer unique identifier or handle, which can be created via CreateCustomer API method
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerUpdateCustomerResponse, Integer, Hash)>] CustomerUpdateCustomerResponse data, response status code and response headers
    def update_customer_with_http_info(body, handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.update_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomerApi.update_customer"
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.update_customer"
      end
      # resource path
      local_var_path = '/v1beta/customers/{handle}'.sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CustomerUpdateCustomerResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
