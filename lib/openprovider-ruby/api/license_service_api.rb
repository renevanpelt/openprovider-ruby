=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class LicenseServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create plesk license
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LicenseCreatePleskLicenseResponse]
    def create_plesk_license(body, opts = {})
      data, _status_code, _headers = create_plesk_license_with_http_info(body, opts)
      data
    end

    # Create plesk license
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseCreatePleskLicenseResponse, Integer, Hash)>] LicenseCreatePleskLicenseResponse data, response status code and response headers
    def create_plesk_license_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.create_plesk_license ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LicenseServiceApi.create_plesk_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LicenseCreatePleskLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#create_plesk_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create virtuozzo license
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [LicenseCreateVirtuozzoLicenseResponse]
    def create_virtuozzo_license(body, opts = {})
      data, _status_code, _headers = create_virtuozzo_license_with_http_info(body, opts)
      data
    end

    # Create virtuozzo license
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseCreateVirtuozzoLicenseResponse, Integer, Hash)>] LicenseCreateVirtuozzoLicenseResponse data, response status code and response headers
    def create_virtuozzo_license_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.create_virtuozzo_license ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LicenseServiceApi.create_virtuozzo_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LicenseCreateVirtuozzoLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#create_virtuozzo_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete plesk license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseDeleteLicenseResponse]
    def delete_plesk_license(key_id, opts = {})
      data, _status_code, _headers = delete_plesk_license_with_http_info(key_id, opts)
      data
    end

    # Delete plesk license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseDeleteLicenseResponse, Integer, Hash)>] LicenseDeleteLicenseResponse data, response status code and response headers
    def delete_plesk_license_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.delete_plesk_license ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.delete_plesk_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseDeleteLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#delete_plesk_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete virtuozzo license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseDeleteLicenseResponse]
    def delete_virtuozzo_license(key_id, opts = {})
      data, _status_code, _headers = delete_virtuozzo_license_with_http_info(key_id, opts)
      data
    end

    # Delete virtuozzo license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseDeleteLicenseResponse, Integer, Hash)>] LicenseDeleteLicenseResponse data, response status code and response headers
    def delete_virtuozzo_license_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.delete_virtuozzo_license ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.delete_virtuozzo_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseDeleteLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#delete_virtuozzo_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get plesk key
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseGetLicenseKeyResponse]
    def get_plesk_key(key_id, opts = {})
      data, _status_code, _headers = get_plesk_key_with_http_info(key_id, opts)
      data
    end

    # Get plesk key
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseGetLicenseKeyResponse, Integer, Hash)>] LicenseGetLicenseKeyResponse data, response status code and response headers
    def get_plesk_key_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.get_plesk_key ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.get_plesk_key"
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk/key/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseGetLicenseKeyResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#get_plesk_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get plesk license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseGetLicenseResponse]
    def get_plesk_license(key_id, opts = {})
      data, _status_code, _headers = get_plesk_license_with_http_info(key_id, opts)
      data
    end

    # Get plesk license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseGetLicenseResponse, Integer, Hash)>] LicenseGetLicenseResponse data, response status code and response headers
    def get_plesk_license_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.get_plesk_license ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.get_plesk_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseGetLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#get_plesk_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get virtuozzo key
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseGetLicenseKeyResponse]
    def get_virtuozzo_key(key_id, opts = {})
      data, _status_code, _headers = get_virtuozzo_key_with_http_info(key_id, opts)
      data
    end

    # Get virtuozzo key
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseGetLicenseKeyResponse, Integer, Hash)>] LicenseGetLicenseKeyResponse data, response status code and response headers
    def get_virtuozzo_key_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.get_virtuozzo_key ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.get_virtuozzo_key"
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo/{key_id}/key'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseGetLicenseKeyResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#get_virtuozzo_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get virtuozzo license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseGetLicenseResponse]
    def get_virtuozzo_license(key_id, opts = {})
      data, _status_code, _headers = get_virtuozzo_license_with_http_info(key_id, opts)
      data
    end

    # Get virtuozzo license
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseGetLicenseResponse, Integer, Hash)>] LicenseGetLicenseResponse data, response status code and response headers
    def get_virtuozzo_license_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.get_virtuozzo_license ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.get_virtuozzo_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseGetLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#get_virtuozzo_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List items
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order_by_id Object ID.
    # @option opts [String] :order_by_key_id License key ID.
    # @option opts [String] :order_by_title Custom license title.
    # @option opts [String] :order_by_product Product type (only Plesk is available).
    # @option opts [String] :order_by_status License status.
    # @option opts [String] :order_by_key_number License key number.
    # @option opts [String] :order_by_expiration_date License expiration date.
    # @option opts [String] :product Product type (only Plesk is available).
    # @return [LicenseListItemsResponse]
    def list_items(opts = {})
      data, _status_code, _headers = list_items_with_http_info(opts)
      data
    end

    # List items
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order_by_id Object ID.
    # @option opts [String] :order_by_key_id License key ID.
    # @option opts [String] :order_by_title Custom license title.
    # @option opts [String] :order_by_product Product type (only Plesk is available).
    # @option opts [String] :order_by_status License status.
    # @option opts [String] :order_by_key_number License key number.
    # @option opts [String] :order_by_expiration_date License expiration date.
    # @option opts [String] :product Product type (only Plesk is available).
    # @return [Array<(LicenseListItemsResponse, Integer, Hash)>] LicenseListItemsResponse data, response status code and response headers
    def list_items_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.list_items ...'
      end
      # resource path
      local_var_path = '/v1beta/licenses/items'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by.id'] = opts[:'order_by_id'] if !opts[:'order_by_id'].nil?
      query_params[:'order_by.key_id'] = opts[:'order_by_key_id'] if !opts[:'order_by_key_id'].nil?
      query_params[:'order_by.title'] = opts[:'order_by_title'] if !opts[:'order_by_title'].nil?
      query_params[:'order_by.product'] = opts[:'order_by_product'] if !opts[:'order_by_product'].nil?
      query_params[:'order_by.status'] = opts[:'order_by_status'] if !opts[:'order_by_status'].nil?
      query_params[:'order_by.key_number'] = opts[:'order_by_key_number'] if !opts[:'order_by_key_number'].nil?
      query_params[:'order_by.expiration_date'] = opts[:'order_by_expiration_date'] if !opts[:'order_by_expiration_date'].nil?
      query_params[:'product'] = opts[:'product'] if !opts[:'product'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseListItemsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List licenses with price version
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order_by_id Object ID.
    # @option opts [String] :order_by_key_id License key ID.
    # @option opts [String] :order_by_title Custom license title.
    # @option opts [String] :order_by_product Product type (only Plesk is available).
    # @option opts [String] :order_by_status License status.
    # @option opts [String] :order_by_key_number License key number.
    # @option opts [String] :order_by_expiration_date License expiration date.
    # @option opts [String] :product Product type (only Plesk is available).
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be sued.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @option opts [String] :status License status.
    # @return [LicenseListLicensesWithPriceVersionResponse]
    def list_licenses_with_price_version(opts = {})
      data, _status_code, _headers = list_licenses_with_price_version_with_http_info(opts)
      data
    end

    # List licenses with price version
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [String] :order_by_id Object ID.
    # @option opts [String] :order_by_key_id License key ID.
    # @option opts [String] :order_by_title Custom license title.
    # @option opts [String] :order_by_product Product type (only Plesk is available).
    # @option opts [String] :order_by_status License status.
    # @option opts [String] :order_by_key_number License key number.
    # @option opts [String] :order_by_expiration_date License expiration date.
    # @option opts [String] :product Product type (only Plesk is available).
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be sued.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @option opts [String] :status License status.
    # @return [Array<(LicenseListLicensesWithPriceVersionResponse, Integer, Hash)>] LicenseListLicensesWithPriceVersionResponse data, response status code and response headers
    def list_licenses_with_price_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.list_licenses_with_price_version ...'
      end
      # resource path
      local_var_path = '/v1beta/licenses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by.id'] = opts[:'order_by_id'] if !opts[:'order_by_id'].nil?
      query_params[:'order_by.key_id'] = opts[:'order_by_key_id'] if !opts[:'order_by_key_id'].nil?
      query_params[:'order_by.title'] = opts[:'order_by_title'] if !opts[:'order_by_title'].nil?
      query_params[:'order_by.product'] = opts[:'order_by_product'] if !opts[:'order_by_product'].nil?
      query_params[:'order_by.status'] = opts[:'order_by_status'] if !opts[:'order_by_status'].nil?
      query_params[:'order_by.key_number'] = opts[:'order_by_key_number'] if !opts[:'order_by_key_number'].nil?
      query_params[:'order_by.expiration_date'] = opts[:'order_by_expiration_date'] if !opts[:'order_by_expiration_date'].nil?
      query_params[:'product'] = opts[:'product'] if !opts[:'product'].nil?
      query_params[:'key_number'] = opts[:'key_number'] if !opts[:'key_number'].nil?
      query_params[:'title_pattern'] = opts[:'title_pattern'] if !opts[:'title_pattern'].nil?
      query_params[:'key_number_pattern'] = opts[:'key_number_pattern'] if !opts[:'key_number_pattern'].nil?
      query_params[:'parent_key_id'] = opts[:'parent_key_id'] if !opts[:'parent_key_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseListLicensesWithPriceVersionResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#list_licenses_with_price_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List plesk licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [Integer] :key_id License key ID.
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be used.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @return [LicenseListLicensesResponse]
    def list_plesk_licenses(opts = {})
      data, _status_code, _headers = list_plesk_licenses_with_http_info(opts)
      data
    end

    # List plesk licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [Integer] :key_id License key ID.
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be used.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @return [Array<(LicenseListLicensesResponse, Integer, Hash)>] LicenseListLicensesResponse data, response status code and response headers
    def list_plesk_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.list_plesk_licenses ...'
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'key_id'] = opts[:'key_id'] if !opts[:'key_id'].nil?
      query_params[:'key_number'] = opts[:'key_number'] if !opts[:'key_number'].nil?
      query_params[:'title_pattern'] = opts[:'title_pattern'] if !opts[:'title_pattern'].nil?
      query_params[:'key_number_pattern'] = opts[:'key_number_pattern'] if !opts[:'key_number_pattern'].nil?
      query_params[:'parent_key_id'] = opts[:'parent_key_id'] if !opts[:'parent_key_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseListLicensesResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#list_plesk_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List virtuozzo licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [Integer] :key_id License key ID.
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be used.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @return [LicenseListLicensesResponse]
    def list_virtuozzo_licenses(opts = {})
      data, _status_code, _headers = list_virtuozzo_licenses_with_http_info(opts)
      data
    end

    # List virtuozzo licenses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [Integer] :key_id License key ID.
    # @option opts [String] :key_number License key number.
    # @option opts [String] :title_pattern Custom title pattern. Wildcard (*) can be used.
    # @option opts [String] :key_number_pattern License key number pattern. Wildcard (*) can be used.
    # @option opts [Integer] :parent_key_id Key ID of the partent license.
    # @return [Array<(LicenseListLicensesResponse, Integer, Hash)>] LicenseListLicensesResponse data, response status code and response headers
    def list_virtuozzo_licenses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.list_virtuozzo_licenses ...'
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'key_id'] = opts[:'key_id'] if !opts[:'key_id'].nil?
      query_params[:'key_number'] = opts[:'key_number'] if !opts[:'key_number'].nil?
      query_params[:'title_pattern'] = opts[:'title_pattern'] if !opts[:'title_pattern'].nil?
      query_params[:'key_number_pattern'] = opts[:'key_number_pattern'] if !opts[:'key_number_pattern'].nil?
      query_params[:'parent_key_id'] = opts[:'parent_key_id'] if !opts[:'parent_key_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LicenseListLicensesResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#list_virtuozzo_licenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset hwid
    # @param body 
    # @param product Product type (only Plesk is available)
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseResetHwidResponse]
    def reset_hwid(body, product, key_id, opts = {})
      data, _status_code, _headers = reset_hwid_with_http_info(body, product, key_id, opts)
      data
    end

    # Reset hwid
    # @param body 
    # @param product Product type (only Plesk is available)
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseResetHwidResponse, Integer, Hash)>] LicenseResetHwidResponse data, response status code and response headers
    def reset_hwid_with_http_info(body, product, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.reset_hwid ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LicenseServiceApi.reset_hwid"
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling LicenseServiceApi.reset_hwid"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.reset_hwid"
      end
      # resource path
      local_var_path = '/v1beta/licenses/hwids/reset/{product}/{key_id}'.sub('{' + 'product' + '}', product.to_s).sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LicenseResetHwidResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#reset_hwid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update plesk license
    # @param body 
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseUpdateLicenseResponse]
    def update_plesk_license(body, key_id, opts = {})
      data, _status_code, _headers = update_plesk_license_with_http_info(body, key_id, opts)
      data
    end

    # Update plesk license
    # @param body 
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseUpdateLicenseResponse, Integer, Hash)>] LicenseUpdateLicenseResponse data, response status code and response headers
    def update_plesk_license_with_http_info(body, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.update_plesk_license ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LicenseServiceApi.update_plesk_license"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.update_plesk_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/plesk/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LicenseUpdateLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#update_plesk_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update virtuozzo license
    # @param body 
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [LicenseUpdateLicenseResponse]
    def update_virtuozzo_license(body, key_id, opts = {})
      data, _status_code, _headers = update_virtuozzo_license_with_http_info(body, key_id, opts)
      data
    end

    # Update virtuozzo license
    # @param body 
    # @param key_id License key ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LicenseUpdateLicenseResponse, Integer, Hash)>] LicenseUpdateLicenseResponse data, response status code and response headers
    def update_virtuozzo_license_with_http_info(body, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LicenseServiceApi.update_virtuozzo_license ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LicenseServiceApi.update_virtuozzo_license"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling LicenseServiceApi.update_virtuozzo_license"
      end
      # resource path
      local_var_path = '/v1beta/licenses/virtuozzo/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'LicenseUpdateLicenseResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LicenseServiceApi#update_virtuozzo_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
