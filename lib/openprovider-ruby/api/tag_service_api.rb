=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class TagServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create tag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TagCreateTagResponse]
    def create_tag(body, opts = {})
      data, _status_code, _headers = create_tag_with_http_info(body, opts)
      data
    end

    # Create tag
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagCreateTagResponse, Integer, Hash)>] TagCreateTagResponse data, response status code and response headers
    def create_tag_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagServiceApi.create_tag ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TagServiceApi.create_tag"
      end
      # resource path
      local_var_path = '/v1beta/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TagCreateTagResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagServiceApi#create_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tag
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key The key of the tag. Allowed values: &#x27;customer&#x27;.
    # @option opts [String] :value The value of the tag. I.e.: VIP customer.
    # @return [TagDeleteTagResponse]
    def delete_tag(opts = {})
      data, _status_code, _headers = delete_tag_with_http_info(opts)
      data
    end

    # Delete tag
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key The key of the tag. Allowed values: &#x27;customer&#x27;.
    # @option opts [String] :value The value of the tag. I.e.: VIP customer.
    # @return [Array<(TagDeleteTagResponse, Integer, Hash)>] TagDeleteTagResponse data, response status code and response headers
    def delete_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagServiceApi.delete_tag ...'
      end
      # resource path
      local_var_path = '/v1beta/tags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TagDeleteTagResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagServiceApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key The key of the tag. Allowed values: &#x27;customer&#x27;.
    # @option opts [String] :value The value of the tag. I.e.: VIP customer.
    # @return [TagListTagsResponse]
    def list_tags(opts = {})
      data, _status_code, _headers = list_tags_with_http_info(opts)
      data
    end

    # List tags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key The key of the tag. Allowed values: &#x27;customer&#x27;.
    # @option opts [String] :value The value of the tag. I.e.: VIP customer.
    # @return [Array<(TagListTagsResponse, Integer, Hash)>] TagListTagsResponse data, response status code and response headers
    def list_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagServiceApi.list_tags ...'
      end
      # resource path
      local_var_path = '/v1beta/tags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TagListTagsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagServiceApi#list_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
