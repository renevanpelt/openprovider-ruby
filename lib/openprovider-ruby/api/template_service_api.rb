=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class TemplateServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create template
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TemplateCreateTemplateResponse]
    def create_template(body, opts = {})
      data, _status_code, _headers = create_template_with_http_info(body, opts)
      data
    end

    # Create template
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateCreateTemplateResponse, Integer, Hash)>] TemplateCreateTemplateResponse data, response status code and response headers
    def create_template_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateServiceApi.create_template ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TemplateServiceApi.create_template"
      end
      # resource path
      local_var_path = '/v1beta/dns/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TemplateCreateTemplateResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateServiceApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete template
    # @param id Template ID
    # @param [Hash] opts the optional parameters
    # @return [TemplateTemplateBoolResponse]
    def delete_template(id, opts = {})
      data, _status_code, _headers = delete_template_with_http_info(id, opts)
      data
    end

    # Delete template
    # @param id Template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateTemplateBoolResponse, Integer, Hash)>] TemplateTemplateBoolResponse data, response status code and response headers
    def delete_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateServiceApi.delete_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplateServiceApi.delete_template"
      end
      # resource path
      local_var_path = '/v1beta/dns/templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TemplateTemplateBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateServiceApi#delete_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get template
    # @param id Template ID
    # @param [Hash] opts the optional parameters
    # @return [TemplateGetTemplateResponse]
    def get_template(id, opts = {})
      data, _status_code, _headers = get_template_with_http_info(id, opts)
      data
    end

    # Get template
    # @param id Template ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateGetTemplateResponse, Integer, Hash)>] TemplateGetTemplateResponse data, response status code and response headers
    def get_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateServiceApi.get_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplateServiceApi.get_template"
      end
      # resource path
      local_var_path = '/v1beta/dns/templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TemplateGetTemplateResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateServiceApi#get_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects in the output. (default to 100)
    # @option opts [String] :offset Used to retrieve all objects from a certain offset up to the limit.
    # @option opts [String] :order Sorting type (asc/desc). (default to asc)
    # @option opts [String] :order_by Field for sorting output. Possible value: name. (default to name)
    # @option opts [BOOLEAN] :with_records Indicates if DNS records should be retrieved. (default to false)
    # @option opts [String] :name_pattern Template name pattern. Wildcard (*)can be used.
    # @return [TemplateListTemplatesResponse]
    def list_templates(opts = {})
      data, _status_code, _headers = list_templates_with_http_info(opts)
      data
    end

    # List templates
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects in the output.
    # @option opts [String] :offset Used to retrieve all objects from a certain offset up to the limit.
    # @option opts [String] :order Sorting type (asc/desc).
    # @option opts [String] :order_by Field for sorting output. Possible value: name.
    # @option opts [BOOLEAN] :with_records Indicates if DNS records should be retrieved.
    # @option opts [String] :name_pattern Template name pattern. Wildcard (*)can be used.
    # @return [Array<(TemplateListTemplatesResponse, Integer, Hash)>] TemplateListTemplatesResponse data, response status code and response headers
    def list_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateServiceApi.list_templates ...'
      end
      # resource path
      local_var_path = '/v1beta/dns/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'with_records'] = opts[:'with_records'] if !opts[:'with_records'].nil?
      query_params[:'name_pattern'] = opts[:'name_pattern'] if !opts[:'name_pattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TemplateListTemplatesResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateServiceApi#list_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
