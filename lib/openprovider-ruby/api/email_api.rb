=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create email
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [EmailCreateEmailResponse]
    def create_email(body, opts = {})
      data, _status_code, _headers = create_email_with_http_info(body, opts)
      data
    end

    # Create email
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCreateEmailResponse, Integer, Hash)>] EmailCreateEmailResponse data, response status code and response headers
    def create_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.create_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailApi.create_email"
      end
      # resource path
      local_var_path = '/v1beta/emails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'EmailCreateEmailResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#create_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete email
    # @param id Object ID
    # @param [Hash] opts the optional parameters
    # @return [EmailDeleteEmailResponse]
    def delete_email(id, opts = {})
      data, _status_code, _headers = delete_email_with_http_info(id, opts)
      data
    end

    # Delete email
    # @param id Object ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailDeleteEmailResponse, Integer, Hash)>] EmailDeleteEmailResponse data, response status code and response headers
    def delete_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.delete_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmailApi.delete_email"
      end
      # resource path
      local_var_path = '/v1beta/emails/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmailDeleteEmailResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#delete_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List emails
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Object ID.
    # @option opts [String] :name Template name.
    # @option opts [String] :group Email template type. There are several types of ICANN emails that can be customized in Openprovider: -errp (Expired Registration Recovery policy emails) -foa (Form of Authorization emails for domain transfers approval rejection) -ive (Information verification emails, such emails used to verify email address of the customer) -tcn (Trademark Claims Notification emails) -wdrp (Whois Data Reminder Policy emails).
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [BOOLEAN] :is_system Is system.
    # @return [EmailListEmailsResponse]
    def list_emails(opts = {})
      data, _status_code, _headers = list_emails_with_http_info(opts)
      data
    end

    # List emails
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Object ID.
    # @option opts [String] :name Template name.
    # @option opts [String] :group Email template type. There are several types of ICANN emails that can be customized in Openprovider: -errp (Expired Registration Recovery policy emails) -foa (Form of Authorization emails for domain transfers approval rejection) -ive (Information verification emails, such emails used to verify email address of the customer) -tcn (Trademark Claims Notification emails) -wdrp (Whois Data Reminder Policy emails).
    # @option opts [Integer] :limit Output limit.
    # @option opts [Integer] :offset Output offset.
    # @option opts [BOOLEAN] :is_system Is system.
    # @return [Array<(EmailListEmailsResponse, Integer, Hash)>] EmailListEmailsResponse data, response status code and response headers
    def list_emails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.list_emails ...'
      end
      # resource path
      local_var_path = '/v1beta/emails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'is_system'] = opts[:'is_system'] if !opts[:'is_system'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmailListEmailsResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#list_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update email
    # @param body 
    # @param id Object ID
    # @param [Hash] opts the optional parameters
    # @return [EmailUpdateEmailResponse]
    def update_email(body, id, opts = {})
      data, _status_code, _headers = update_email_with_http_info(body, id, opts)
      data
    end

    # Update email
    # @param body 
    # @param id Object ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailUpdateEmailResponse, Integer, Hash)>] EmailUpdateEmailResponse data, response status code and response headers
    def update_email_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.update_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailApi.update_email"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmailApi.update_email"
      end
      # resource path
      local_var_path = '/v1beta/emails/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'EmailUpdateEmailResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#update_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
