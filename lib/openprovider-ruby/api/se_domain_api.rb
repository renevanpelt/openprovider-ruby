=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class SEDomainApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBoolResponse]
    def create_domain_mixin7(body, opts = {})
      data, _status_code, _headers = create_domain_mixin7_with_http_info(body, opts)
      data
    end

    # Create domain
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def create_domain_mixin7_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEDomainApi.create_domain_mixin7 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SEDomainApi.create_domain_mixin7"
      end
      # resource path
      local_var_path = '/v1beta/spam-expert/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEDomainApi#create_domain_mixin7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete domain
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :bundle Indicates if old subscriptions backward compatibility is used.
    # @return [ResponseBoolResponse]
    def delete_domain_mixin7(domain_name, opts = {})
      data, _status_code, _headers = delete_domain_mixin7_with_http_info(domain_name, opts)
      data
    end

    # Delete domain
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :bundle Indicates if old subscriptions backward compatibility is used.
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def delete_domain_mixin7_with_http_info(domain_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEDomainApi.delete_domain_mixin7 ...'
      end
      # verify the required parameter 'domain_name' is set
      if @api_client.config.client_side_validation && domain_name.nil?
        fail ArgumentError, "Missing the required parameter 'domain_name' when calling SEDomainApi.delete_domain_mixin7"
      end
      # resource path
      local_var_path = '/v1beta/spam-expert/domains/{domain_name}'.sub('{' + 'domain_name' + '}', domain_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bundle'] = opts[:'bundle'] if !opts[:'bundle'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEDomainApi#delete_domain_mixin7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get domain
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_records Indicates, whether records should be displayed in output. (default to false)
    # @option opts [BOOLEAN] :bundle Indicates if old subscriptions backward compatibility is used.
    # @return [SeDomainGetDomainResponse]
    def get_domain_mixin7(domain_name, opts = {})
      data, _status_code, _headers = get_domain_mixin7_with_http_info(domain_name, opts)
      data
    end

    # Get domain
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_records Indicates, whether records should be displayed in output.
    # @option opts [BOOLEAN] :bundle Indicates if old subscriptions backward compatibility is used.
    # @return [Array<(SeDomainGetDomainResponse, Integer, Hash)>] SeDomainGetDomainResponse data, response status code and response headers
    def get_domain_mixin7_with_http_info(domain_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEDomainApi.get_domain_mixin7 ...'
      end
      # verify the required parameter 'domain_name' is set
      if @api_client.config.client_side_validation && domain_name.nil?
        fail ArgumentError, "Missing the required parameter 'domain_name' when calling SEDomainApi.get_domain_mixin7"
      end
      # resource path
      local_var_path = '/v1beta/spam-expert/domains/{domain_name}'.sub('{' + 'domain_name' + '}', domain_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'with_records'] = opts[:'with_records'] if !opts[:'with_records'].nil?
      query_params[:'bundle'] = opts[:'bundle'] if !opts[:'bundle'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SeDomainGetDomainResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEDomainApi#get_domain_mixin7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update domain
    # @param body 
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @return [ResponseBoolResponse]
    def update_domain_mixin7(body, domain_name, opts = {})
      data, _status_code, _headers = update_domain_mixin7_with_http_info(body, domain_name, opts)
      data
    end

    # Update domain
    # @param body 
    # @param domain_name Domain full name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBoolResponse, Integer, Hash)>] ResponseBoolResponse data, response status code and response headers
    def update_domain_mixin7_with_http_info(body, domain_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEDomainApi.update_domain_mixin7 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SEDomainApi.update_domain_mixin7"
      end
      # verify the required parameter 'domain_name' is set
      if @api_client.config.client_side_validation && domain_name.nil?
        fail ArgumentError, "Missing the required parameter 'domain_name' when calling SEDomainApi.update_domain_mixin7"
      end
      # resource path
      local_var_path = '/v1beta/spam-expert/domains/{domain_name}'.sub('{' + 'domain_name' + '}', domain_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResponseBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEDomainApi#update_domain_mixin7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
