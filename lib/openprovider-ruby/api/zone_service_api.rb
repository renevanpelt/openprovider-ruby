=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module OpenProvider
  class ZoneServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create zone
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ZoneZoneBoolResponse]
    def create_zone(body, opts = {})
      data, _status_code, _headers = create_zone_with_http_info(body, opts)
      data
    end

    # Create zone
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ZoneZoneBoolResponse, Integer, Hash)>] ZoneZoneBoolResponse data, response status code and response headers
    def create_zone_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZoneServiceApi.create_zone ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ZoneServiceApi.create_zone"
      end
      # resource path
      local_var_path = '/v1beta/dns/zones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ZoneZoneBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZoneServiceApi#create_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete zone
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id DNS zone ID.
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of sectigo premium DNS zone should be deleted.
    # @return [ZoneZoneBoolResponse]
    def delete_zone(name, opts = {})
      data, _status_code, _headers = delete_zone_with_http_info(name, opts)
      data
    end

    # Delete zone
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id DNS zone ID.
    # @option opts [String] :domain_name Domain name without extension.
    # @option opts [String] :domain_extension Domain extension.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of sectigo premium DNS zone should be deleted.
    # @return [Array<(ZoneZoneBoolResponse, Integer, Hash)>] ZoneZoneBoolResponse data, response status code and response headers
    def delete_zone_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZoneServiceApi.delete_zone ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ZoneServiceApi.delete_zone"
      end
      # resource path
      local_var_path = '/v1beta/dns/zones/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'domain.name'] = opts[:'domain_name'] if !opts[:'domain_name'].nil?
      query_params[:'domain.extension'] = opts[:'domain_extension'] if !opts[:'domain_extension'].nil?
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ZoneZoneBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZoneServiceApi#delete_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get zone
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id DNS zone ID.
    # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output. (default to false)
    # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output. (default to false)
    # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
    # @return [ZoneGetZoneResponse]
    def get_zone(name, opts = {})
      data, _status_code, _headers = get_zone_with_http_info(name, opts)
      data
    end

    # Get zone
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id DNS zone ID.
    # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output.
    # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output.
    # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
    # @return [Array<(ZoneGetZoneResponse, Integer, Hash)>] ZoneGetZoneResponse data, response status code and response headers
    def get_zone_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZoneServiceApi.get_zone ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ZoneServiceApi.get_zone"
      end
      # resource path
      local_var_path = '/v1beta/dns/zones/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'with_records'] = opts[:'with_records'] if !opts[:'with_records'].nil?
      query_params[:'with_history'] = opts[:'with_history'] if !opts[:'with_history'].nil?
      query_params[:'with_dnskey'] = opts[:'with_dnskey'] if !opts[:'with_dnskey'].nil?
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ZoneGetZoneResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZoneServiceApi#get_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List zones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects in the output. (default value: 100, maximum value: 500). (default to 100)
    # @option opts [Integer] :offset Used to retrieve all objects from a certain offset up to the. (default value: 0).
    # @option opts [String] :order_by_creation_date Sorting type (asc/desc). (default to desc)
    # @option opts [String] :order_by_modification_date Sorting type (asc/desc).
    # @option opts [String] :order_by_name Sorting type (asc/desc).
    # @option opts [String] :type DNS zone type (master or slave).
    # @option opts [String] :name_pattern DNS zone name pattern. Wildcard (*) can be used.
    # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output.
    # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output.
    # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
    # @return [ZoneListZonesResponse]
    def list_zones(opts = {})
      data, _status_code, _headers = list_zones_with_http_info(opts)
      data
    end

    # List zones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects in the output. (default value: 100, maximum value: 500).
    # @option opts [Integer] :offset Used to retrieve all objects from a certain offset up to the. (default value: 0).
    # @option opts [String] :order_by_creation_date Sorting type (asc/desc).
    # @option opts [String] :order_by_modification_date Sorting type (asc/desc).
    # @option opts [String] :order_by_name Sorting type (asc/desc).
    # @option opts [String] :type DNS zone type (master or slave).
    # @option opts [String] :name_pattern DNS zone name pattern. Wildcard (*) can be used.
    # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output.
    # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output.
    # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
    # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
    # @return [Array<(ZoneListZonesResponse, Integer, Hash)>] ZoneListZonesResponse data, response status code and response headers
    def list_zones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZoneServiceApi.list_zones ...'
      end
      # resource path
      local_var_path = '/v1beta/dns/zones'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order_by.creation_date'] = opts[:'order_by_creation_date'] if !opts[:'order_by_creation_date'].nil?
      query_params[:'order_by.modification_date'] = opts[:'order_by_modification_date'] if !opts[:'order_by_modification_date'].nil?
      query_params[:'order_by.name'] = opts[:'order_by_name'] if !opts[:'order_by_name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'name_pattern'] = opts[:'name_pattern'] if !opts[:'name_pattern'].nil?
      query_params[:'with_records'] = opts[:'with_records'] if !opts[:'with_records'].nil?
      query_params[:'with_history'] = opts[:'with_history'] if !opts[:'with_history'].nil?
      query_params[:'with_dnskey'] = opts[:'with_dnskey'] if !opts[:'with_dnskey'].nil?
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ZoneListZonesResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZoneServiceApi#list_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update zone
    # @param body 
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @return [ZoneZoneBoolResponse]
    def update_zone(body, name, opts = {})
      data, _status_code, _headers = update_zone_with_http_info(body, name, opts)
      data
    end

    # Update zone
    # @param body 
    # @param name Name of the domain to which DNS zone corresponds
    # @param [Hash] opts the optional parameters
    # @return [Array<(ZoneZoneBoolResponse, Integer, Hash)>] ZoneZoneBoolResponse data, response status code and response headers
    def update_zone_with_http_info(body, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ZoneServiceApi.update_zone ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ZoneServiceApi.update_zone"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ZoneServiceApi.update_zone"
      end
      # resource path
      local_var_path = '/v1beta/dns/zones/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ZoneZoneBoolResponse' 

      auth_names = opts[:auth_names] || ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZoneServiceApi#update_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
