=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

require 'date'

module OpenProvider
  class CustomerExtensionData
    attr_accessor :admin_type

    attr_accessor :applicant_purpose

    attr_accessor :birth_date

    attr_accessor :company_name_cyrillic

    attr_accessor :company_name_latin

    attr_accessor :company_registration_number

    attr_accessor :contact_title

    attr_accessor :country_of_citizenship

    attr_accessor :customer_uin

    attr_accessor :ens_auth_id

    attr_accessor :ens_key

    attr_accessor :first_name_cyrillic

    attr_accessor :first_name_latin

    attr_accessor :hr_member

    attr_accessor :industry_class

    attr_accessor :is_private_enterpreneur

    attr_accessor :last_name_cyrillic

    attr_accessor :last_name_latin

    attr_accessor :legal_address_cyrillic

    attr_accessor :legal_type

    attr_accessor :middle_name_cyrillic

    attr_accessor :middle_name_latin

    attr_accessor :mobile_phone_number

    attr_accessor :nexus_category

    attr_accessor :org_type

    attr_accessor :passport_issue_date

    attr_accessor :passport_issuer

    attr_accessor :passport_number

    attr_accessor :passport_series

    attr_accessor :postal_address_cyrillic

    attr_accessor :social_security_number

    attr_accessor :tax_payer_number

    attr_accessor :uin

    attr_accessor :user_type

    attr_accessor :vat

    attr_accessor :website

    attr_accessor :whois_email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'admin_type' => :'admin_type',
        :'applicant_purpose' => :'applicant_purpose',
        :'birth_date' => :'birth_date',
        :'company_name_cyrillic' => :'company_name_cyrillic',
        :'company_name_latin' => :'company_name_latin',
        :'company_registration_number' => :'company_registration_number',
        :'contact_title' => :'contact_title',
        :'country_of_citizenship' => :'country_of_citizenship',
        :'customer_uin' => :'customer_uin',
        :'ens_auth_id' => :'ens_auth_id',
        :'ens_key' => :'ens_key',
        :'first_name_cyrillic' => :'first_name_cyrillic',
        :'first_name_latin' => :'first_name_latin',
        :'hr_member' => :'hr_member',
        :'industry_class' => :'industry_class',
        :'is_private_enterpreneur' => :'is_private_enterpreneur',
        :'last_name_cyrillic' => :'last_name_cyrillic',
        :'last_name_latin' => :'last_name_latin',
        :'legal_address_cyrillic' => :'legal_address_cyrillic',
        :'legal_type' => :'legal_type',
        :'middle_name_cyrillic' => :'middle_name_cyrillic',
        :'middle_name_latin' => :'middle_name_latin',
        :'mobile_phone_number' => :'mobile_phone_number',
        :'nexus_category' => :'nexus_category',
        :'org_type' => :'org_type',
        :'passport_issue_date' => :'passport_issue_date',
        :'passport_issuer' => :'passport_issuer',
        :'passport_number' => :'passport_number',
        :'passport_series' => :'passport_series',
        :'postal_address_cyrillic' => :'postal_address_cyrillic',
        :'social_security_number' => :'social_security_number',
        :'tax_payer_number' => :'tax_payer_number',
        :'uin' => :'uin',
        :'user_type' => :'user_type',
        :'vat' => :'vat',
        :'website' => :'website',
        :'whois_email' => :'whois_email'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'admin_type' => :'Object',
        :'applicant_purpose' => :'Object',
        :'birth_date' => :'Object',
        :'company_name_cyrillic' => :'Object',
        :'company_name_latin' => :'Object',
        :'company_registration_number' => :'Object',
        :'contact_title' => :'Object',
        :'country_of_citizenship' => :'Object',
        :'customer_uin' => :'Object',
        :'ens_auth_id' => :'Object',
        :'ens_key' => :'Object',
        :'first_name_cyrillic' => :'Object',
        :'first_name_latin' => :'Object',
        :'hr_member' => :'Object',
        :'industry_class' => :'Object',
        :'is_private_enterpreneur' => :'Object',
        :'last_name_cyrillic' => :'Object',
        :'last_name_latin' => :'Object',
        :'legal_address_cyrillic' => :'Object',
        :'legal_type' => :'Object',
        :'middle_name_cyrillic' => :'Object',
        :'middle_name_latin' => :'Object',
        :'mobile_phone_number' => :'Object',
        :'nexus_category' => :'Object',
        :'org_type' => :'Object',
        :'passport_issue_date' => :'Object',
        :'passport_issuer' => :'Object',
        :'passport_number' => :'Object',
        :'passport_series' => :'Object',
        :'postal_address_cyrillic' => :'Object',
        :'social_security_number' => :'Object',
        :'tax_payer_number' => :'Object',
        :'uin' => :'Object',
        :'user_type' => :'Object',
        :'vat' => :'Object',
        :'website' => :'Object',
        :'whois_email' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenProvider::CustomerExtensionData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenProvider::CustomerExtensionData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'admin_type')
        self.admin_type = attributes[:'admin_type']
      end

      if attributes.key?(:'applicant_purpose')
        self.applicant_purpose = attributes[:'applicant_purpose']
      end

      if attributes.key?(:'birth_date')
        self.birth_date = attributes[:'birth_date']
      end

      if attributes.key?(:'company_name_cyrillic')
        self.company_name_cyrillic = attributes[:'company_name_cyrillic']
      end

      if attributes.key?(:'company_name_latin')
        self.company_name_latin = attributes[:'company_name_latin']
      end

      if attributes.key?(:'company_registration_number')
        self.company_registration_number = attributes[:'company_registration_number']
      end

      if attributes.key?(:'contact_title')
        self.contact_title = attributes[:'contact_title']
      end

      if attributes.key?(:'country_of_citizenship')
        self.country_of_citizenship = attributes[:'country_of_citizenship']
      end

      if attributes.key?(:'customer_uin')
        self.customer_uin = attributes[:'customer_uin']
      end

      if attributes.key?(:'ens_auth_id')
        self.ens_auth_id = attributes[:'ens_auth_id']
      end

      if attributes.key?(:'ens_key')
        self.ens_key = attributes[:'ens_key']
      end

      if attributes.key?(:'first_name_cyrillic')
        self.first_name_cyrillic = attributes[:'first_name_cyrillic']
      end

      if attributes.key?(:'first_name_latin')
        self.first_name_latin = attributes[:'first_name_latin']
      end

      if attributes.key?(:'hr_member')
        self.hr_member = attributes[:'hr_member']
      end

      if attributes.key?(:'industry_class')
        self.industry_class = attributes[:'industry_class']
      end

      if attributes.key?(:'is_private_enterpreneur')
        self.is_private_enterpreneur = attributes[:'is_private_enterpreneur']
      end

      if attributes.key?(:'last_name_cyrillic')
        self.last_name_cyrillic = attributes[:'last_name_cyrillic']
      end

      if attributes.key?(:'last_name_latin')
        self.last_name_latin = attributes[:'last_name_latin']
      end

      if attributes.key?(:'legal_address_cyrillic')
        self.legal_address_cyrillic = attributes[:'legal_address_cyrillic']
      end

      if attributes.key?(:'legal_type')
        self.legal_type = attributes[:'legal_type']
      end

      if attributes.key?(:'middle_name_cyrillic')
        self.middle_name_cyrillic = attributes[:'middle_name_cyrillic']
      end

      if attributes.key?(:'middle_name_latin')
        self.middle_name_latin = attributes[:'middle_name_latin']
      end

      if attributes.key?(:'mobile_phone_number')
        self.mobile_phone_number = attributes[:'mobile_phone_number']
      end

      if attributes.key?(:'nexus_category')
        self.nexus_category = attributes[:'nexus_category']
      end

      if attributes.key?(:'org_type')
        self.org_type = attributes[:'org_type']
      end

      if attributes.key?(:'passport_issue_date')
        self.passport_issue_date = attributes[:'passport_issue_date']
      end

      if attributes.key?(:'passport_issuer')
        self.passport_issuer = attributes[:'passport_issuer']
      end

      if attributes.key?(:'passport_number')
        self.passport_number = attributes[:'passport_number']
      end

      if attributes.key?(:'passport_series')
        self.passport_series = attributes[:'passport_series']
      end

      if attributes.key?(:'postal_address_cyrillic')
        self.postal_address_cyrillic = attributes[:'postal_address_cyrillic']
      end

      if attributes.key?(:'social_security_number')
        self.social_security_number = attributes[:'social_security_number']
      end

      if attributes.key?(:'tax_payer_number')
        self.tax_payer_number = attributes[:'tax_payer_number']
      end

      if attributes.key?(:'uin')
        self.uin = attributes[:'uin']
      end

      if attributes.key?(:'user_type')
        self.user_type = attributes[:'user_type']
      end

      if attributes.key?(:'vat')
        self.vat = attributes[:'vat']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'whois_email')
        self.whois_email = attributes[:'whois_email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          admin_type == o.admin_type &&
          applicant_purpose == o.applicant_purpose &&
          birth_date == o.birth_date &&
          company_name_cyrillic == o.company_name_cyrillic &&
          company_name_latin == o.company_name_latin &&
          company_registration_number == o.company_registration_number &&
          contact_title == o.contact_title &&
          country_of_citizenship == o.country_of_citizenship &&
          customer_uin == o.customer_uin &&
          ens_auth_id == o.ens_auth_id &&
          ens_key == o.ens_key &&
          first_name_cyrillic == o.first_name_cyrillic &&
          first_name_latin == o.first_name_latin &&
          hr_member == o.hr_member &&
          industry_class == o.industry_class &&
          is_private_enterpreneur == o.is_private_enterpreneur &&
          last_name_cyrillic == o.last_name_cyrillic &&
          last_name_latin == o.last_name_latin &&
          legal_address_cyrillic == o.legal_address_cyrillic &&
          legal_type == o.legal_type &&
          middle_name_cyrillic == o.middle_name_cyrillic &&
          middle_name_latin == o.middle_name_latin &&
          mobile_phone_number == o.mobile_phone_number &&
          nexus_category == o.nexus_category &&
          org_type == o.org_type &&
          passport_issue_date == o.passport_issue_date &&
          passport_issuer == o.passport_issuer &&
          passport_number == o.passport_number &&
          passport_series == o.passport_series &&
          postal_address_cyrillic == o.postal_address_cyrillic &&
          social_security_number == o.social_security_number &&
          tax_payer_number == o.tax_payer_number &&
          uin == o.uin &&
          user_type == o.user_type &&
          vat == o.vat &&
          website == o.website &&
          whois_email == o.whois_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [admin_type, applicant_purpose, birth_date, company_name_cyrillic, company_name_latin, company_registration_number, contact_title, country_of_citizenship, customer_uin, ens_auth_id, ens_key, first_name_cyrillic, first_name_latin, hr_member, industry_class, is_private_enterpreneur, last_name_cyrillic, last_name_latin, legal_address_cyrillic, legal_type, middle_name_cyrillic, middle_name_latin, mobile_phone_number, nexus_category, org_type, passport_issue_date, passport_issuer, passport_number, passport_series, postal_address_cyrillic, social_security_number, tax_payer_number, uin, user_type, vat, website, whois_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenProvider.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
