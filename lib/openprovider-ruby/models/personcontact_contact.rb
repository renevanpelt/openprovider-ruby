=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

require 'date'

module OpenProvider
  class PersoncontactContact
    attr_accessor :additional_data

    attr_accessor :address

    attr_accessor :api_access_enabled

    attr_accessor :api_client_ip_list

    attr_accessor :auth_type

    attr_accessor :comments

    attr_accessor :company_name

    attr_accessor :email

    attr_accessor :hash_changed_at

    attr_accessor :id

    attr_accessor :is_active

    attr_accessor :last_api_call_at

    attr_accessor :last_login_at

    attr_accessor :locale

    attr_accessor :name

    attr_accessor :password_change_declined_at

    attr_accessor :password_changed_at

    attr_accessor :phone

    attr_accessor :rcp_client_ip_list

    attr_accessor :reseller_id

    attr_accessor :role

    attr_accessor :secret_key

    attr_accessor :username

    attr_accessor :vat

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_data' => :'additional_data',
        :'address' => :'address',
        :'api_access_enabled' => :'api_access_enabled',
        :'api_client_ip_list' => :'api_client_ip_list',
        :'auth_type' => :'auth_type',
        :'comments' => :'comments',
        :'company_name' => :'company_name',
        :'email' => :'email',
        :'hash_changed_at' => :'hash_changed_at',
        :'id' => :'id',
        :'is_active' => :'is_active',
        :'last_api_call_at' => :'last_api_call_at',
        :'last_login_at' => :'last_login_at',
        :'locale' => :'locale',
        :'name' => :'name',
        :'password_change_declined_at' => :'password_change_declined_at',
        :'password_changed_at' => :'password_changed_at',
        :'phone' => :'phone',
        :'rcp_client_ip_list' => :'rcp_client_ip_list',
        :'reseller_id' => :'reseller_id',
        :'role' => :'role',
        :'secret_key' => :'secret_key',
        :'username' => :'username',
        :'vat' => :'vat'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_data' => :'Object',
        :'address' => :'Object',
        :'api_access_enabled' => :'Object',
        :'api_client_ip_list' => :'Object',
        :'auth_type' => :'Object',
        :'comments' => :'Object',
        :'company_name' => :'Object',
        :'email' => :'Object',
        :'hash_changed_at' => :'Object',
        :'id' => :'Object',
        :'is_active' => :'Object',
        :'last_api_call_at' => :'Object',
        :'last_login_at' => :'Object',
        :'locale' => :'Object',
        :'name' => :'Object',
        :'password_change_declined_at' => :'Object',
        :'password_changed_at' => :'Object',
        :'phone' => :'Object',
        :'rcp_client_ip_list' => :'Object',
        :'reseller_id' => :'Object',
        :'role' => :'Object',
        :'secret_key' => :'Object',
        :'username' => :'Object',
        :'vat' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenProvider::PersoncontactContact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenProvider::PersoncontactContact`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_data')
        self.additional_data = attributes[:'additional_data']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'api_access_enabled')
        self.api_access_enabled = attributes[:'api_access_enabled']
      end

      if attributes.key?(:'api_client_ip_list')
        self.api_client_ip_list = attributes[:'api_client_ip_list']
      end

      if attributes.key?(:'auth_type')
        self.auth_type = attributes[:'auth_type']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'hash_changed_at')
        self.hash_changed_at = attributes[:'hash_changed_at']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.key?(:'last_api_call_at')
        self.last_api_call_at = attributes[:'last_api_call_at']
      end

      if attributes.key?(:'last_login_at')
        self.last_login_at = attributes[:'last_login_at']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'password_change_declined_at')
        self.password_change_declined_at = attributes[:'password_change_declined_at']
      end

      if attributes.key?(:'password_changed_at')
        self.password_changed_at = attributes[:'password_changed_at']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'rcp_client_ip_list')
        self.rcp_client_ip_list = attributes[:'rcp_client_ip_list']
      end

      if attributes.key?(:'reseller_id')
        self.reseller_id = attributes[:'reseller_id']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'secret_key')
        self.secret_key = attributes[:'secret_key']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'vat')
        self.vat = attributes[:'vat']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_data == o.additional_data &&
          address == o.address &&
          api_access_enabled == o.api_access_enabled &&
          api_client_ip_list == o.api_client_ip_list &&
          auth_type == o.auth_type &&
          comments == o.comments &&
          company_name == o.company_name &&
          email == o.email &&
          hash_changed_at == o.hash_changed_at &&
          id == o.id &&
          is_active == o.is_active &&
          last_api_call_at == o.last_api_call_at &&
          last_login_at == o.last_login_at &&
          locale == o.locale &&
          name == o.name &&
          password_change_declined_at == o.password_change_declined_at &&
          password_changed_at == o.password_changed_at &&
          phone == o.phone &&
          rcp_client_ip_list == o.rcp_client_ip_list &&
          reseller_id == o.reseller_id &&
          role == o.role &&
          secret_key == o.secret_key &&
          username == o.username &&
          vat == o.vat
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_data, address, api_access_enabled, api_client_ip_list, auth_type, comments, company_name, email, hash_changed_at, id, is_active, last_api_call_at, last_login_at, locale, name, password_change_declined_at, password_changed_at, phone, rcp_client_ip_list, reseller_id, role, secret_key, username, vat].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenProvider.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
