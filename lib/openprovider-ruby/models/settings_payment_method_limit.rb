=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

require 'date'

module OpenProvider
  class SettingsPaymentMethodLimit
    attr_accessor :aud

    attr_accessor :bgn

    attr_accessor :brl

    attr_accessor :cad

    attr_accessor :chf

    attr_accessor :cny

    attr_accessor :czk

    attr_accessor :dkk

    attr_accessor :eek

    attr_accessor :eur

    attr_accessor :gbp

    attr_accessor :ghs

    attr_accessor :hkd

    attr_accessor :hrk

    attr_accessor :huf

    attr_accessor :idr

    attr_accessor :ils

    attr_accessor :inr

    attr_accessor :jpy

    attr_accessor :krw

    attr_accessor :lkr

    attr_accessor :ltl

    attr_accessor :lvl

    attr_accessor :mxn

    attr_accessor :myr

    attr_accessor :nok

    attr_accessor :nzd

    attr_accessor :php

    attr_accessor :pln

    attr_accessor :ron

    attr_accessor :rub

    attr_accessor :sek

    attr_accessor :sgd

    attr_accessor :thb

    attr_accessor :try

    attr_accessor :usd

    attr_accessor :zar

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aud' => :'AUD',
        :'bgn' => :'BGN',
        :'brl' => :'BRL',
        :'cad' => :'CAD',
        :'chf' => :'CHF',
        :'cny' => :'CNY',
        :'czk' => :'CZK',
        :'dkk' => :'DKK',
        :'eek' => :'EEK',
        :'eur' => :'EUR',
        :'gbp' => :'GBP',
        :'ghs' => :'GHS',
        :'hkd' => :'HKD',
        :'hrk' => :'HRK',
        :'huf' => :'HUF',
        :'idr' => :'IDR',
        :'ils' => :'ILS',
        :'inr' => :'INR',
        :'jpy' => :'JPY',
        :'krw' => :'KRW',
        :'lkr' => :'LKR',
        :'ltl' => :'LTL',
        :'lvl' => :'LVL',
        :'mxn' => :'MXN',
        :'myr' => :'MYR',
        :'nok' => :'NOK',
        :'nzd' => :'NZD',
        :'php' => :'PHP',
        :'pln' => :'PLN',
        :'ron' => :'RON',
        :'rub' => :'RUB',
        :'sek' => :'SEK',
        :'sgd' => :'SGD',
        :'thb' => :'THB',
        :'try' => :'TRY',
        :'usd' => :'USD',
        :'zar' => :'ZAR'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aud' => :'Object',
        :'bgn' => :'Object',
        :'brl' => :'Object',
        :'cad' => :'Object',
        :'chf' => :'Object',
        :'cny' => :'Object',
        :'czk' => :'Object',
        :'dkk' => :'Object',
        :'eek' => :'Object',
        :'eur' => :'Object',
        :'gbp' => :'Object',
        :'ghs' => :'Object',
        :'hkd' => :'Object',
        :'hrk' => :'Object',
        :'huf' => :'Object',
        :'idr' => :'Object',
        :'ils' => :'Object',
        :'inr' => :'Object',
        :'jpy' => :'Object',
        :'krw' => :'Object',
        :'lkr' => :'Object',
        :'ltl' => :'Object',
        :'lvl' => :'Object',
        :'mxn' => :'Object',
        :'myr' => :'Object',
        :'nok' => :'Object',
        :'nzd' => :'Object',
        :'php' => :'Object',
        :'pln' => :'Object',
        :'ron' => :'Object',
        :'rub' => :'Object',
        :'sek' => :'Object',
        :'sgd' => :'Object',
        :'thb' => :'Object',
        :'try' => :'Object',
        :'usd' => :'Object',
        :'zar' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenProvider::SettingsPaymentMethodLimit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenProvider::SettingsPaymentMethodLimit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aud')
        self.aud = attributes[:'aud']
      end

      if attributes.key?(:'bgn')
        self.bgn = attributes[:'bgn']
      end

      if attributes.key?(:'brl')
        self.brl = attributes[:'brl']
      end

      if attributes.key?(:'cad')
        self.cad = attributes[:'cad']
      end

      if attributes.key?(:'chf')
        self.chf = attributes[:'chf']
      end

      if attributes.key?(:'cny')
        self.cny = attributes[:'cny']
      end

      if attributes.key?(:'czk')
        self.czk = attributes[:'czk']
      end

      if attributes.key?(:'dkk')
        self.dkk = attributes[:'dkk']
      end

      if attributes.key?(:'eek')
        self.eek = attributes[:'eek']
      end

      if attributes.key?(:'eur')
        self.eur = attributes[:'eur']
      end

      if attributes.key?(:'gbp')
        self.gbp = attributes[:'gbp']
      end

      if attributes.key?(:'ghs')
        self.ghs = attributes[:'ghs']
      end

      if attributes.key?(:'hkd')
        self.hkd = attributes[:'hkd']
      end

      if attributes.key?(:'hrk')
        self.hrk = attributes[:'hrk']
      end

      if attributes.key?(:'huf')
        self.huf = attributes[:'huf']
      end

      if attributes.key?(:'idr')
        self.idr = attributes[:'idr']
      end

      if attributes.key?(:'ils')
        self.ils = attributes[:'ils']
      end

      if attributes.key?(:'inr')
        self.inr = attributes[:'inr']
      end

      if attributes.key?(:'jpy')
        self.jpy = attributes[:'jpy']
      end

      if attributes.key?(:'krw')
        self.krw = attributes[:'krw']
      end

      if attributes.key?(:'lkr')
        self.lkr = attributes[:'lkr']
      end

      if attributes.key?(:'ltl')
        self.ltl = attributes[:'ltl']
      end

      if attributes.key?(:'lvl')
        self.lvl = attributes[:'lvl']
      end

      if attributes.key?(:'mxn')
        self.mxn = attributes[:'mxn']
      end

      if attributes.key?(:'myr')
        self.myr = attributes[:'myr']
      end

      if attributes.key?(:'nok')
        self.nok = attributes[:'nok']
      end

      if attributes.key?(:'nzd')
        self.nzd = attributes[:'nzd']
      end

      if attributes.key?(:'php')
        self.php = attributes[:'php']
      end

      if attributes.key?(:'pln')
        self.pln = attributes[:'pln']
      end

      if attributes.key?(:'ron')
        self.ron = attributes[:'ron']
      end

      if attributes.key?(:'rub')
        self.rub = attributes[:'rub']
      end

      if attributes.key?(:'sek')
        self.sek = attributes[:'sek']
      end

      if attributes.key?(:'sgd')
        self.sgd = attributes[:'sgd']
      end

      if attributes.key?(:'thb')
        self.thb = attributes[:'thb']
      end

      if attributes.key?(:'try')
        self.try = attributes[:'try']
      end

      if attributes.key?(:'usd')
        self.usd = attributes[:'usd']
      end

      if attributes.key?(:'zar')
        self.zar = attributes[:'zar']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aud == o.aud &&
          bgn == o.bgn &&
          brl == o.brl &&
          cad == o.cad &&
          chf == o.chf &&
          cny == o.cny &&
          czk == o.czk &&
          dkk == o.dkk &&
          eek == o.eek &&
          eur == o.eur &&
          gbp == o.gbp &&
          ghs == o.ghs &&
          hkd == o.hkd &&
          hrk == o.hrk &&
          huf == o.huf &&
          idr == o.idr &&
          ils == o.ils &&
          inr == o.inr &&
          jpy == o.jpy &&
          krw == o.krw &&
          lkr == o.lkr &&
          ltl == o.ltl &&
          lvl == o.lvl &&
          mxn == o.mxn &&
          myr == o.myr &&
          nok == o.nok &&
          nzd == o.nzd &&
          php == o.php &&
          pln == o.pln &&
          ron == o.ron &&
          rub == o.rub &&
          sek == o.sek &&
          sgd == o.sgd &&
          thb == o.thb &&
          try == o.try &&
          usd == o.usd &&
          zar == o.zar
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aud, bgn, brl, cad, chf, cny, czk, dkk, eek, eur, gbp, ghs, hkd, hrk, huf, idr, ils, inr, jpy, krw, lkr, ltl, lvl, mxn, myr, nok, nzd, php, pln, ron, rub, sek, sgd, thb, try, usd, zar].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenProvider.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
