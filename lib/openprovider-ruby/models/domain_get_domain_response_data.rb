=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

require 'date'

module OpenProvider
  class DomainGetDomainResponseData
    attr_accessor :abuse_details

    attr_accessor :active_date

    attr_accessor :additional_data

    attr_accessor :admin_handle

    attr_accessor :api_history

    attr_accessor :application_id

    # When new gTLD is started it gets through several phases before it becomes available for registration to everybody (General availability or GA). There are several phases before GA when it is still possible to apply for a domain, but with some restrictions.
    attr_accessor :application_mode

    attr_accessor :application_mode_expiration_date

    attr_accessor :application_mode_title

    attr_accessor :application_notice_id

    attr_accessor :application_smd

    attr_accessor :auth_code

    attr_accessor :autorenew

    attr_accessor :billing_handle

    attr_accessor :can_renew

    attr_accessor :comments

    attr_accessor :comments_last_changed_at

    attr_accessor :creation_date

    attr_accessor :delete_status

    attr_accessor :deleted_at

    # Indicates, if DNSSEC is enabled. Possible values: signedDelegation, unsigned.
    attr_accessor :dnssec

    attr_accessor :dnssec_keys

    attr_accessor :domain

    attr_accessor :expiration_date

    attr_accessor :hard_quarantine_expiry_date

    attr_accessor :has_active_sectigo_zone

    attr_accessor :has_history

    attr_accessor :history

    attr_accessor :id

    attr_accessor :internal_auth_code

    attr_accessor :is_abusive

    attr_accessor :is_client_hold_enabled

    attr_accessor :is_deleted

    attr_accessor :is_dnssec_enabled

    attr_accessor :is_hosted_whois

    attr_accessor :is_lockable

    attr_accessor :is_locked

    attr_accessor :is_parked

    attr_accessor :is_premium

    attr_accessor :is_private_whois_allowed

    attr_accessor :is_private_whois_enabled

    attr_accessor :is_sectigo_dns_enabled

    attr_accessor :is_spamexperts_enabled

    attr_accessor :last_changed

    attr_accessor :modify_owner_allowed

    attr_accessor :name_servers

    attr_accessor :ns_group

    attr_accessor :ns_template_id

    attr_accessor :ns_template_name

    attr_accessor :nsgroup_id

    attr_accessor :order_date

    attr_accessor :owner

    attr_accessor :owner_company_name

    attr_accessor :owner_handle

    attr_accessor :quarantine_expiration_date

    attr_accessor :registry_expiration_date

    attr_accessor :registry_statuses

    attr_accessor :renew

    attr_accessor :renewal_date

    attr_accessor :reseller_handle

    attr_accessor :reseller_id

    attr_accessor :restorable_until

    attr_accessor :scheduled_at

    attr_accessor :scheduled_from

    attr_accessor :soft_quarantine_expiry_date

    attr_accessor :status

    attr_accessor :tech_handle

    attr_accessor :trade_allowed

    attr_accessor :trade_auth_code_required

    attr_accessor :transfer_auth_code_required

    attr_accessor :transfer_cancel_supported

    attr_accessor :type

    attr_accessor :unit

    attr_accessor :use_domicile

    attr_accessor :verification_email_exp_date

    attr_accessor :verification_email_name

    attr_accessor :verification_email_status

    attr_accessor :verification_email_status_description

    attr_accessor :whois_privacy_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'abuse_details' => :'abuse_details',
        :'active_date' => :'active_date',
        :'additional_data' => :'additional_data',
        :'admin_handle' => :'admin_handle',
        :'api_history' => :'api_history',
        :'application_id' => :'application_id',
        :'application_mode' => :'application_mode',
        :'application_mode_expiration_date' => :'application_mode_expiration_date',
        :'application_mode_title' => :'application_mode_title',
        :'application_notice_id' => :'application_notice_id',
        :'application_smd' => :'application_smd',
        :'auth_code' => :'auth_code',
        :'autorenew' => :'autorenew',
        :'billing_handle' => :'billing_handle',
        :'can_renew' => :'can_renew',
        :'comments' => :'comments',
        :'comments_last_changed_at' => :'comments_last_changed_at',
        :'creation_date' => :'creation_date',
        :'delete_status' => :'delete_status',
        :'deleted_at' => :'deleted_at',
        :'dnssec' => :'dnssec',
        :'dnssec_keys' => :'dnssec_keys',
        :'domain' => :'domain',
        :'expiration_date' => :'expiration_date',
        :'hard_quarantine_expiry_date' => :'hard_quarantine_expiry_date',
        :'has_active_sectigo_zone' => :'has_active_sectigo_zone',
        :'has_history' => :'has_history',
        :'history' => :'history',
        :'id' => :'id',
        :'internal_auth_code' => :'internal_auth_code',
        :'is_abusive' => :'is_abusive',
        :'is_client_hold_enabled' => :'is_client_hold_enabled',
        :'is_deleted' => :'is_deleted',
        :'is_dnssec_enabled' => :'is_dnssec_enabled',
        :'is_hosted_whois' => :'is_hosted_whois',
        :'is_lockable' => :'is_lockable',
        :'is_locked' => :'is_locked',
        :'is_parked' => :'is_parked',
        :'is_premium' => :'is_premium',
        :'is_private_whois_allowed' => :'is_private_whois_allowed',
        :'is_private_whois_enabled' => :'is_private_whois_enabled',
        :'is_sectigo_dns_enabled' => :'is_sectigo_dns_enabled',
        :'is_spamexperts_enabled' => :'is_spamexperts_enabled',
        :'last_changed' => :'last_changed',
        :'modify_owner_allowed' => :'modify_owner_allowed',
        :'name_servers' => :'name_servers',
        :'ns_group' => :'ns_group',
        :'ns_template_id' => :'ns_template_id',
        :'ns_template_name' => :'ns_template_name',
        :'nsgroup_id' => :'nsgroup_id',
        :'order_date' => :'order_date',
        :'owner' => :'owner',
        :'owner_company_name' => :'owner_company_name',
        :'owner_handle' => :'owner_handle',
        :'quarantine_expiration_date' => :'quarantine_expiration_date',
        :'registry_expiration_date' => :'registry_expiration_date',
        :'registry_statuses' => :'registry_statuses',
        :'renew' => :'renew',
        :'renewal_date' => :'renewal_date',
        :'reseller_handle' => :'reseller_handle',
        :'reseller_id' => :'reseller_id',
        :'restorable_until' => :'restorable_until',
        :'scheduled_at' => :'scheduled_at',
        :'scheduled_from' => :'scheduled_from',
        :'soft_quarantine_expiry_date' => :'soft_quarantine_expiry_date',
        :'status' => :'status',
        :'tech_handle' => :'tech_handle',
        :'trade_allowed' => :'trade_allowed',
        :'trade_auth_code_required' => :'trade_auth_code_required',
        :'transfer_auth_code_required' => :'transfer_auth_code_required',
        :'transfer_cancel_supported' => :'transfer_cancel_supported',
        :'type' => :'type',
        :'unit' => :'unit',
        :'use_domicile' => :'use_domicile',
        :'verification_email_exp_date' => :'verification_email_exp_date',
        :'verification_email_name' => :'verification_email_name',
        :'verification_email_status' => :'verification_email_status',
        :'verification_email_status_description' => :'verification_email_status_description',
        :'whois_privacy_data' => :'whois_privacy_data'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'abuse_details' => :'Object',
        :'active_date' => :'Object',
        :'additional_data' => :'Object',
        :'admin_handle' => :'Object',
        :'api_history' => :'Object',
        :'application_id' => :'Object',
        :'application_mode' => :'Object',
        :'application_mode_expiration_date' => :'Object',
        :'application_mode_title' => :'Object',
        :'application_notice_id' => :'Object',
        :'application_smd' => :'Object',
        :'auth_code' => :'Object',
        :'autorenew' => :'Object',
        :'billing_handle' => :'Object',
        :'can_renew' => :'Object',
        :'comments' => :'Object',
        :'comments_last_changed_at' => :'Object',
        :'creation_date' => :'Object',
        :'delete_status' => :'Object',
        :'deleted_at' => :'Object',
        :'dnssec' => :'Object',
        :'dnssec_keys' => :'Object',
        :'domain' => :'Object',
        :'expiration_date' => :'Object',
        :'hard_quarantine_expiry_date' => :'Object',
        :'has_active_sectigo_zone' => :'Object',
        :'has_history' => :'Object',
        :'history' => :'Object',
        :'id' => :'Object',
        :'internal_auth_code' => :'Object',
        :'is_abusive' => :'Object',
        :'is_client_hold_enabled' => :'Object',
        :'is_deleted' => :'Object',
        :'is_dnssec_enabled' => :'Object',
        :'is_hosted_whois' => :'Object',
        :'is_lockable' => :'Object',
        :'is_locked' => :'Object',
        :'is_parked' => :'Object',
        :'is_premium' => :'Object',
        :'is_private_whois_allowed' => :'Object',
        :'is_private_whois_enabled' => :'Object',
        :'is_sectigo_dns_enabled' => :'Object',
        :'is_spamexperts_enabled' => :'Object',
        :'last_changed' => :'Object',
        :'modify_owner_allowed' => :'Object',
        :'name_servers' => :'Object',
        :'ns_group' => :'Object',
        :'ns_template_id' => :'Object',
        :'ns_template_name' => :'Object',
        :'nsgroup_id' => :'Object',
        :'order_date' => :'Object',
        :'owner' => :'Object',
        :'owner_company_name' => :'Object',
        :'owner_handle' => :'Object',
        :'quarantine_expiration_date' => :'Object',
        :'registry_expiration_date' => :'Object',
        :'registry_statuses' => :'Object',
        :'renew' => :'Object',
        :'renewal_date' => :'Object',
        :'reseller_handle' => :'Object',
        :'reseller_id' => :'Object',
        :'restorable_until' => :'Object',
        :'scheduled_at' => :'Object',
        :'scheduled_from' => :'Object',
        :'soft_quarantine_expiry_date' => :'Object',
        :'status' => :'Object',
        :'tech_handle' => :'Object',
        :'trade_allowed' => :'Object',
        :'trade_auth_code_required' => :'Object',
        :'transfer_auth_code_required' => :'Object',
        :'transfer_cancel_supported' => :'Object',
        :'type' => :'Object',
        :'unit' => :'Object',
        :'use_domicile' => :'Object',
        :'verification_email_exp_date' => :'Object',
        :'verification_email_name' => :'Object',
        :'verification_email_status' => :'Object',
        :'verification_email_status_description' => :'Object',
        :'whois_privacy_data' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenProvider::DomainGetDomainResponseData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenProvider::DomainGetDomainResponseData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'abuse_details')
        self.abuse_details = attributes[:'abuse_details']
      end

      if attributes.key?(:'active_date')
        self.active_date = attributes[:'active_date']
      end

      if attributes.key?(:'additional_data')
        self.additional_data = attributes[:'additional_data']
      end

      if attributes.key?(:'admin_handle')
        self.admin_handle = attributes[:'admin_handle']
      end

      if attributes.key?(:'api_history')
        if (value = attributes[:'api_history']).is_a?(Array)
          self.api_history = value
        end
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'application_mode')
        self.application_mode = attributes[:'application_mode']
      end

      if attributes.key?(:'application_mode_expiration_date')
        self.application_mode_expiration_date = attributes[:'application_mode_expiration_date']
      end

      if attributes.key?(:'application_mode_title')
        self.application_mode_title = attributes[:'application_mode_title']
      end

      if attributes.key?(:'application_notice_id')
        self.application_notice_id = attributes[:'application_notice_id']
      end

      if attributes.key?(:'application_smd')
        self.application_smd = attributes[:'application_smd']
      end

      if attributes.key?(:'auth_code')
        self.auth_code = attributes[:'auth_code']
      end

      if attributes.key?(:'autorenew')
        self.autorenew = attributes[:'autorenew']
      end

      if attributes.key?(:'billing_handle')
        self.billing_handle = attributes[:'billing_handle']
      end

      if attributes.key?(:'can_renew')
        self.can_renew = attributes[:'can_renew']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'comments_last_changed_at')
        self.comments_last_changed_at = attributes[:'comments_last_changed_at']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'delete_status')
        self.delete_status = attributes[:'delete_status']
      end

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'dnssec')
        self.dnssec = attributes[:'dnssec']
      end

      if attributes.key?(:'dnssec_keys')
        if (value = attributes[:'dnssec_keys']).is_a?(Array)
          self.dnssec_keys = value
        end
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'hard_quarantine_expiry_date')
        self.hard_quarantine_expiry_date = attributes[:'hard_quarantine_expiry_date']
      end

      if attributes.key?(:'has_active_sectigo_zone')
        self.has_active_sectigo_zone = attributes[:'has_active_sectigo_zone']
      end

      if attributes.key?(:'has_history')
        self.has_history = attributes[:'has_history']
      end

      if attributes.key?(:'history')
        if (value = attributes[:'history']).is_a?(Array)
          self.history = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'internal_auth_code')
        self.internal_auth_code = attributes[:'internal_auth_code']
      end

      if attributes.key?(:'is_abusive')
        self.is_abusive = attributes[:'is_abusive']
      end

      if attributes.key?(:'is_client_hold_enabled')
        self.is_client_hold_enabled = attributes[:'is_client_hold_enabled']
      end

      if attributes.key?(:'is_deleted')
        self.is_deleted = attributes[:'is_deleted']
      end

      if attributes.key?(:'is_dnssec_enabled')
        self.is_dnssec_enabled = attributes[:'is_dnssec_enabled']
      end

      if attributes.key?(:'is_hosted_whois')
        self.is_hosted_whois = attributes[:'is_hosted_whois']
      end

      if attributes.key?(:'is_lockable')
        self.is_lockable = attributes[:'is_lockable']
      end

      if attributes.key?(:'is_locked')
        self.is_locked = attributes[:'is_locked']
      end

      if attributes.key?(:'is_parked')
        self.is_parked = attributes[:'is_parked']
      end

      if attributes.key?(:'is_premium')
        self.is_premium = attributes[:'is_premium']
      end

      if attributes.key?(:'is_private_whois_allowed')
        self.is_private_whois_allowed = attributes[:'is_private_whois_allowed']
      end

      if attributes.key?(:'is_private_whois_enabled')
        self.is_private_whois_enabled = attributes[:'is_private_whois_enabled']
      end

      if attributes.key?(:'is_sectigo_dns_enabled')
        self.is_sectigo_dns_enabled = attributes[:'is_sectigo_dns_enabled']
      end

      if attributes.key?(:'is_spamexperts_enabled')
        self.is_spamexperts_enabled = attributes[:'is_spamexperts_enabled']
      end

      if attributes.key?(:'last_changed')
        self.last_changed = attributes[:'last_changed']
      end

      if attributes.key?(:'modify_owner_allowed')
        self.modify_owner_allowed = attributes[:'modify_owner_allowed']
      end

      if attributes.key?(:'name_servers')
        if (value = attributes[:'name_servers']).is_a?(Array)
          self.name_servers = value
        end
      end

      if attributes.key?(:'ns_group')
        self.ns_group = attributes[:'ns_group']
      end

      if attributes.key?(:'ns_template_id')
        self.ns_template_id = attributes[:'ns_template_id']
      end

      if attributes.key?(:'ns_template_name')
        self.ns_template_name = attributes[:'ns_template_name']
      end

      if attributes.key?(:'nsgroup_id')
        self.nsgroup_id = attributes[:'nsgroup_id']
      end

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'owner_company_name')
        self.owner_company_name = attributes[:'owner_company_name']
      end

      if attributes.key?(:'owner_handle')
        self.owner_handle = attributes[:'owner_handle']
      end

      if attributes.key?(:'quarantine_expiration_date')
        self.quarantine_expiration_date = attributes[:'quarantine_expiration_date']
      end

      if attributes.key?(:'registry_expiration_date')
        self.registry_expiration_date = attributes[:'registry_expiration_date']
      end

      if attributes.key?(:'registry_statuses')
        self.registry_statuses = attributes[:'registry_statuses']
      end

      if attributes.key?(:'renew')
        self.renew = attributes[:'renew']
      end

      if attributes.key?(:'renewal_date')
        self.renewal_date = attributes[:'renewal_date']
      end

      if attributes.key?(:'reseller_handle')
        self.reseller_handle = attributes[:'reseller_handle']
      end

      if attributes.key?(:'reseller_id')
        self.reseller_id = attributes[:'reseller_id']
      end

      if attributes.key?(:'restorable_until')
        self.restorable_until = attributes[:'restorable_until']
      end

      if attributes.key?(:'scheduled_at')
        self.scheduled_at = attributes[:'scheduled_at']
      end

      if attributes.key?(:'scheduled_from')
        self.scheduled_from = attributes[:'scheduled_from']
      end

      if attributes.key?(:'soft_quarantine_expiry_date')
        self.soft_quarantine_expiry_date = attributes[:'soft_quarantine_expiry_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tech_handle')
        self.tech_handle = attributes[:'tech_handle']
      end

      if attributes.key?(:'trade_allowed')
        self.trade_allowed = attributes[:'trade_allowed']
      end

      if attributes.key?(:'trade_auth_code_required')
        self.trade_auth_code_required = attributes[:'trade_auth_code_required']
      end

      if attributes.key?(:'transfer_auth_code_required')
        self.transfer_auth_code_required = attributes[:'transfer_auth_code_required']
      end

      if attributes.key?(:'transfer_cancel_supported')
        self.transfer_cancel_supported = attributes[:'transfer_cancel_supported']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'use_domicile')
        self.use_domicile = attributes[:'use_domicile']
      end

      if attributes.key?(:'verification_email_exp_date')
        self.verification_email_exp_date = attributes[:'verification_email_exp_date']
      end

      if attributes.key?(:'verification_email_name')
        self.verification_email_name = attributes[:'verification_email_name']
      end

      if attributes.key?(:'verification_email_status')
        self.verification_email_status = attributes[:'verification_email_status']
      end

      if attributes.key?(:'verification_email_status_description')
        self.verification_email_status_description = attributes[:'verification_email_status_description']
      end

      if attributes.key?(:'whois_privacy_data')
        self.whois_privacy_data = attributes[:'whois_privacy_data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          abuse_details == o.abuse_details &&
          active_date == o.active_date &&
          additional_data == o.additional_data &&
          admin_handle == o.admin_handle &&
          api_history == o.api_history &&
          application_id == o.application_id &&
          application_mode == o.application_mode &&
          application_mode_expiration_date == o.application_mode_expiration_date &&
          application_mode_title == o.application_mode_title &&
          application_notice_id == o.application_notice_id &&
          application_smd == o.application_smd &&
          auth_code == o.auth_code &&
          autorenew == o.autorenew &&
          billing_handle == o.billing_handle &&
          can_renew == o.can_renew &&
          comments == o.comments &&
          comments_last_changed_at == o.comments_last_changed_at &&
          creation_date == o.creation_date &&
          delete_status == o.delete_status &&
          deleted_at == o.deleted_at &&
          dnssec == o.dnssec &&
          dnssec_keys == o.dnssec_keys &&
          domain == o.domain &&
          expiration_date == o.expiration_date &&
          hard_quarantine_expiry_date == o.hard_quarantine_expiry_date &&
          has_active_sectigo_zone == o.has_active_sectigo_zone &&
          has_history == o.has_history &&
          history == o.history &&
          id == o.id &&
          internal_auth_code == o.internal_auth_code &&
          is_abusive == o.is_abusive &&
          is_client_hold_enabled == o.is_client_hold_enabled &&
          is_deleted == o.is_deleted &&
          is_dnssec_enabled == o.is_dnssec_enabled &&
          is_hosted_whois == o.is_hosted_whois &&
          is_lockable == o.is_lockable &&
          is_locked == o.is_locked &&
          is_parked == o.is_parked &&
          is_premium == o.is_premium &&
          is_private_whois_allowed == o.is_private_whois_allowed &&
          is_private_whois_enabled == o.is_private_whois_enabled &&
          is_sectigo_dns_enabled == o.is_sectigo_dns_enabled &&
          is_spamexperts_enabled == o.is_spamexperts_enabled &&
          last_changed == o.last_changed &&
          modify_owner_allowed == o.modify_owner_allowed &&
          name_servers == o.name_servers &&
          ns_group == o.ns_group &&
          ns_template_id == o.ns_template_id &&
          ns_template_name == o.ns_template_name &&
          nsgroup_id == o.nsgroup_id &&
          order_date == o.order_date &&
          owner == o.owner &&
          owner_company_name == o.owner_company_name &&
          owner_handle == o.owner_handle &&
          quarantine_expiration_date == o.quarantine_expiration_date &&
          registry_expiration_date == o.registry_expiration_date &&
          registry_statuses == o.registry_statuses &&
          renew == o.renew &&
          renewal_date == o.renewal_date &&
          reseller_handle == o.reseller_handle &&
          reseller_id == o.reseller_id &&
          restorable_until == o.restorable_until &&
          scheduled_at == o.scheduled_at &&
          scheduled_from == o.scheduled_from &&
          soft_quarantine_expiry_date == o.soft_quarantine_expiry_date &&
          status == o.status &&
          tech_handle == o.tech_handle &&
          trade_allowed == o.trade_allowed &&
          trade_auth_code_required == o.trade_auth_code_required &&
          transfer_auth_code_required == o.transfer_auth_code_required &&
          transfer_cancel_supported == o.transfer_cancel_supported &&
          type == o.type &&
          unit == o.unit &&
          use_domicile == o.use_domicile &&
          verification_email_exp_date == o.verification_email_exp_date &&
          verification_email_name == o.verification_email_name &&
          verification_email_status == o.verification_email_status &&
          verification_email_status_description == o.verification_email_status_description &&
          whois_privacy_data == o.whois_privacy_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [abuse_details, active_date, additional_data, admin_handle, api_history, application_id, application_mode, application_mode_expiration_date, application_mode_title, application_notice_id, application_smd, auth_code, autorenew, billing_handle, can_renew, comments, comments_last_changed_at, creation_date, delete_status, deleted_at, dnssec, dnssec_keys, domain, expiration_date, hard_quarantine_expiry_date, has_active_sectigo_zone, has_history, history, id, internal_auth_code, is_abusive, is_client_hold_enabled, is_deleted, is_dnssec_enabled, is_hosted_whois, is_lockable, is_locked, is_parked, is_premium, is_private_whois_allowed, is_private_whois_enabled, is_sectigo_dns_enabled, is_spamexperts_enabled, last_changed, modify_owner_allowed, name_servers, ns_group, ns_template_id, ns_template_name, nsgroup_id, order_date, owner, owner_company_name, owner_handle, quarantine_expiration_date, registry_expiration_date, registry_statuses, renew, renewal_date, reseller_handle, reseller_id, restorable_until, scheduled_at, scheduled_from, soft_quarantine_expiry_date, status, tech_handle, trade_allowed, trade_auth_code_required, transfer_auth_code_required, transfer_cancel_supported, type, unit, use_domicile, verification_email_exp_date, verification_email_name, verification_email_status, verification_email_status_description, whois_privacy_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenProvider.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
