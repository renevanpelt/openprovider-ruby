=begin
#REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

require 'spec_helper'
require 'json'

# Unit tests for OpenProvider::ZoneServiceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ZoneServiceApi' do
  before do
    # run before each test
    @instance = OpenProvider::ZoneServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ZoneServiceApi' do
    it 'should create an instance of ZoneServiceApi' do
      expect(@instance).to be_instance_of(OpenProvider::ZoneServiceApi)
    end
  end

  # unit tests for create_zone
  # Create zone
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ZoneZoneBoolResponse]
  describe 'create_zone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_zone
  # Delete zone
  # @param name Name of the domain to which DNS zone corresponds
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id DNS zone ID.
  # @option opts [String] :domain_name Domain name without extension.
  # @option opts [String] :domain_extension Domain extension.
  # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of sectigo premium DNS zone should be deleted.
  # @return [ZoneZoneBoolResponse]
  describe 'delete_zone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_zone
  # Get zone
  # @param name Name of the domain to which DNS zone corresponds
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id DNS zone ID.
  # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output.
  # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output.
  # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
  # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
  # @return [ZoneGetZoneResponse]
  describe 'get_zone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_zones
  # List zones
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Limits the number of objects in the output. (default value: 100, maximum value: 500).
  # @option opts [Integer] :offset Used to retrieve all objects from a certain offset up to the. (default value: 0).
  # @option opts [String] :order_by_creation_date Sorting type (asc/desc).
  # @option opts [String] :order_by_modification_date Sorting type (asc/desc).
  # @option opts [String] :order_by_name Sorting type (asc/desc).
  # @option opts [String] :type DNS zone type (master or slave).
  # @option opts [String] :name_pattern DNS zone name pattern. Wildcard (*) can be used.
  # @option opts [BOOLEAN] :with_records Indicates, whether DNS records should be displayed in output.
  # @option opts [BOOLEAN] :with_history Indicates, whether DNS zone history should be displayed in output.
  # @option opts [BOOLEAN] :with_dnskey Indicates, whether DNSSEC keys should be displayed in output.
  # @option opts [String] :provider Name of the DNS provider. Set provider&#x3D;sectigo in case of only sectigo premium DNS zone should be retrieved.
  # @return [ZoneListZonesResponse]
  describe 'list_zones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_zone
  # Update zone
  # @param body 
  # @param name Name of the domain to which DNS zone corresponds
  # @param [Hash] opts the optional parameters
  # @return [ZoneZoneBoolResponse]
  describe 'update_zone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
